※ SOLID
	- SRP : 단일 책임 원칙(Single Responsibility Principle)
	- OCP : 개방-폐쇄 원칙(Open-Closed Principle)
	- LSP : 리스코프 치환 원칙(Liskov Substitution Principle)
	- ISP : 인터페이스 분리 원칙(Interface Segregation Principle)
	- DIP : 의존관계 역전 원칙(Dependency Inversion Principle)

1) SRP
	- 한 클래스는 하나의 책임만 가져야 한다.
	- 중요한 기준은 변경이다. 변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것이다.

2) OCP
	- 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다.
	- 다형성을 통해 구현
	
	※ 문제점
	MemberService 클라이언트가 구현 클래스를 직접 선택
	public class MemberService {
		//MemberRepository m = new MemoryMemberRepository(); //기존 코드
		MemberRepository m = new JdbcMemberRepository();     //변경 코드
	}
	
	- 하지만 구현 객체를 변경하려면 코드를 변경해야 한다.
	- 다형성을 사용했지만 OCP 원칙을 지킬 수 없다.
	- 객체를 생성하고 연관관계를 맺어주는 별도의 설정자가 필요하다. => 스프링 컨테이너
	
3) LSP
	- 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.
	- 다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것, 다형성을 지원하기 위한 원칙
	- 인터페이스를 구현한 구현체를 믿고 사용하려면, 이 원칙이 필요하다.
	
	ex) 자동차 인터페이스의 엑셀은 앞으로 가야 한다. 하지만 뒤로 가게 못만드는 것은 아니다.
	하지만 뒤로 가게 구현하면 LSP 위반이다. 느리더라도 앞으로 가야한다.
	
4) ISP
	- 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다
	- 자동차 인터페이스 -> 운전 인터페이스, 정비 인터페이스로 분리
	- 사용자 클라이언트 -> 운전자 클라이언트, 정비사 클라이언트로 분리
	- 분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않음
	- 인터페이스가 명확해지고, 대체 가능성이 높아진다.
	
5) DIP
	- 프로그래머는 “추상화에 의존해야지, 구체화에 의존하면 안된다.” 의존성 주입은 이 원칙을 따르는 방법 중 하나
	- 쉽게 이야기해서 구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻
	- 구현체에 의존하게 되면 변경이 아주 어려워진다.
	ex) 운전자는 자동차에 의존해야지 아반떼에만 의존하면 안된다.
	
	※ 문제점
	public class MemberService {
		MemberRepository m = new MemoryMemberRepository(); 
	}
	
	- 하지만 MemberService는 인터페이스에 의존하지만, 구현 클래스도 동시에 의존한다.
	- DIP 위반

※ 다형성만으로는 OCP, DIP를 지킬 수 없다.

그렇기 때문에 스프링은 DI와 DI 컨테이너를 제공하여 OCP, DIP를 가능하게 지원해 준다.
	- DI(Dependency Injection) : 의존성 주입
	- DI 컨테이너

이것들을 활용하여 코드의 변경 없이 기능 확장이 가능하다.

※ 결론
	- 모든 설계에 역할과 구현을 분리한다.
	- 어플리케이션 설계도 공연을 설계하듯 배역만 만들어두고, 배우는 언제든지 유연하게 변경할 수 있도록 만드는 것이 좋은 객체 지향 설계다.
	
=================================================================================================================================================================================

※ 스프링의 핵심
	- 스프링은 자바 언어 기반의 프레임워크
	- 자바 언어의 가장 큰 특징 : 객체 지향
	- 스프링은 객체 지향 언어가 가진 특성을 살려내는 프레임워크

※ 객체 지향 특징
	1) 추상화
	2) 캡슐화
	3) 상속
	4) 다형성
• 객체 지향 프로그래밍은 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나 여러 개의 독립된 단위, 즉 "객체"들의 모임으로 파악하고자 하는 것이다.
  각각의 객체는 메시지를 주고받고, 데이터를 처리할 수 있다.
• 객체 지향 프로그래밍은 프로그램을 유연하고 변경이 용이하게 만들기 때문에 대규모 소프트웨어 개발에 많이 사용된다.
	- 유연하고 변경이 용이하다? ==> 다형성
	- 역할과 구현을 분리하여 세상이 단순해지고 유연해지며 변경도 편리해진다.
		- 클라이언트는 대상의 역할(인터페이스)만 알면 된다.
		- 클라이언트는 구현 대상의 내부 구조를 몰라도 된다.
		- 클라이언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않는다.
		- 클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않는다.
		ex) 
		- 운전자는 자동차만 알면 된다.
		- 운전자는 자동차 내부 구조를 몰라도 된다.
		- 운전자는 자동차 내부 구조가 변경되어도 영향을 받지 않는다.
		- 운전자는 아반떼에서 소나타로 변경해도 영향을 받지 않는다.
	
	• 역할 = 인터페이스
	• 구현 = 인터페이스를 implements 한 클래스
	
★ 스프링과 객체 지향
	- 다형성이 중요
	- 스프링은 다형성을 극대화해서 이용할 수 있게 도와준다.
	- 스프링에서 이야기하는 제어의 역전, 의존관계 주입은 다형성을 활용해서 역할과 구현을 편리하게 다룰 수 있도록 지원한다.

=================================================================================================================================================================================	

※ AppConfig의 역할 : 어플리케이션의 전체 동작 방식을 구성(config)하기 위해, 구현 객체를 생성하고 연결하는 책임

※ 제어의 역전 IoC(Inversion of Control)
	- 기존 프로그램은 클라이언트 구현 객체가 스스로 필요한 서버 구현 객체를 생성하고, 연결하고, 실행했다. 
	  한마디로 구현 객체가 프로그램의 제어 흐름을 스스로 조종했다.
	
	- 반면에 AppConfig가 등장한 이후에 구현 객체는 자신의 로직을 실행하는 역할만 담당한다. 
	  프로그램의 제어 흐름은 이제 AppConfig가 가져간다. 예를 들어서 OrderServiceImpl은 필요한 인터페이스들을 호출하지만 어떤 구현 객체들이 실행될지 모른다.
	 
	이렇듯 프로그램의 제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것을 제어의 역전(IoC)이라 한다.
	
※ 의존관계 주입 DI
	- 의존관계는 정적인 클래스 의존 관계와 실행 시점에 결정되는 동적인 객체(인스턴스) 의존 관계 둘을 분리해서 생각해야 한다.
		- 정적인 클래스 의존 관계 : 클래스가 사용하는 import 코드만 보고 의존관계를 알 수 있다.
		ex) OrderServiceImpl은 MemberRepository와 DiscountPolicy에 의존한다는것을 알 수 있다.
		    하지만 실제 어떤 객체가 주입 될지는 알 수 없다.
		
		- 동적인 객체 의존 관계 : 어플리케이션 실행 시점에 실제 생성된 객체 인스턴스의 참조가 연결된 의존 관계이다.
		애플리케이션 실행 시점(런타임)에 외부에서 실제 구현 객체를 생성하고 클라이언트에 전달해서 클라이언트와 서버의 실제 의존관계가 연결 되는 것을 의존관계 주입이라 한다.
		
※ AppConfig.class 처럼 객체를 생성하고 관리하면서 의존관계를 연결해 주는 것을 IoC 컨테이너 또는 DI 컨테이너라고 한다.

※ 스프링 컨테이너 
	- ApplicationContext를 스프링 컨테이너라고 한다.
	- 스프링 컨테이너는 @Configuration이 붙은 AppConfig를 설정(구성) 정보로 사용한다.
	  여기서 @Bean이라 적힌 메서드를 모두 호출해서 반환된 객체를 스프링 컨테이너에 등록한다.
	  이렇게 스프링 컨테이너에 등록된 객체를 스프링 빈이라 한다.
	- 스프링 빈은 @Bean 이 붙은 메서드의 명을 스프링 빈의 이름으로 사용한다.
	  @Bean(name = "") 을 통해 지정할 수도 있다.

※ BeanFactory와 ApplicationContext
	- BeanFactory 
		- 스프링 컨테이너의 최상위 인터페이스
		- 스프링 빈을 관리하고 조회하는 역할 담당
		- src/test/java의 hello.core.beanfind에서 사용한 대부분의 메소드는 BeanFactory가 제공하는 기능이다.
	
	- ApplicationContext
		- 인터페이스이다.
		- XML 기반으로 만들 수 있고, 어노테이션 기반의 자바 설정 클래스로 만들 수 있다.
		- new AnnotationConfigApplicationContext(AppConfig.class)는 ApplicationContext 인터페이스의 구현체이다.
		
		- BeanFactory 기능을 모두 상속받아서 제공
		- 부가기능을 제공
			- 메시지 소스를 활용한 국제화 기능(MessageSource)
			- 환경변수(EnvironmentCapable)
			- 어플리케이션 이벤트(ApplicationEventPublisher)
			- 리소스 조회(ResourceLoader)
	
	ApplicationContext는 BeanFactory의 기능을 상속받는다.
	ApplicationContext는 빈 관리기능 + 편리한 부가 기능을 제공한다.
	BeanFactory를 직접 사용할 일은 거의 없다. 부가기능이 포함된 ApplicationContext를 사용한다.
	BeanFactory나 ApplicationContext를 스프링 컨테이너라 한다.

=================================================================================================================================================================================

※ 스프링 빈 설정 메타 정보 - BeanDefinition
	- 스프링은 다양한 설정 형식을 지원하는 방법의 중심에는 BeanDefinition 이라는 추상화가 있다.(역할과 구현을 개념적으로 나눈 것)
		- XML을 읽어서 BeanDefinition을 만들면 된다.
		- 자바 코드를 읽어서 BeanDefinition을 만들면 된다.
	- 스프링 컨테이너는 자바 코드인지, XML인지 몰라도 된다. 오직 BeanDefinition만 알면 된다.
	- BeanDefinition 을 빈 설정 메타정보라 한다.
		- @Bean, <bean> 당 각각 하나씩 메타 정보가 생성된다.
		- 스프링 컨테이너는 이 메타정보를 기반으로 스프링 빈을 생성한다.
		
	- XML
		- ApplicationContext <= (GenericXmlApplicationContext는 XmlBeanDefinitionReader를 사용해서 AppConfig.xml를 읽는다)
	- JAVA
		- ApplicationContext <= (AnnotationConfigApplicationContext는 AnnotatedBeanDefinitionReader를 사용해서 AppConfig.class를 읽는다)
		
※ BeanDefinition 정보
	- BeanClassName: 생성할 빈의 클래스 명(자바 설정 처럼 팩토리 역할의 빈을 사용하면 없음)
	- factoryBeanName: 팩토리 역할의 빈을 사용할 경우 이름, 예) appConfig
	- factoryMethodName: 빈을 생성할 팩토리 메서드 지정, 예) memberService
	- Scope: 싱글톤(기본값)
	- lazyInit: 스프링 컨테이너를 생성할 때 빈을 생성하는 것이 아니라, 실제 빈을 사용할 때 까지 최대한 생성을 지연 처리 하는지 여부
	- InitMethodName: 빈을 생성하고, 의존관계를 적용한 뒤에 호출되는 초기화 메서드 명
	- DestroyMethodName: 빈의 생명주기가 끝나서 제거하기 직전에 호출되는 메서드 명
	- Constructor arguments, Properties: 의존관계 주입에서 사용한다. (자바 설정 처럼 팩토리 역할의 빈을 사용	하면 없음)

=================================================================================================================================================================================

※ 싱글톤 패턴 문제점
	- 싱글톤 패턴을 구현하는 코드 자체가 많이 들어간다.
	- 의존관계상 클라이언트가 구체 클래스에 의존한다. => DIP를 위반한다.
	- 클라이언트가 구체 클래스에 의존해서 OCP 원칙을 위반할 가능성이 높다.
	- 내부 속성을 변경하거나 초기화 하기 어렵다.
	- private 생성자로 자식 클래스를 만들기 어렵다. => 유연성이 떨어진다.

※ 싱글톤 컨테이너
	- 스프링 컨테이너는 싱글톤 패턴의 문제점을 해결하면서, 객체 인스턴스를 싱글톤으로 관리한다.
	- 스프링 빈이 바로 싱글톤으로 관리되는 빈이다.
	
	- 스프링 컨테이너는 싱글턴 패턴을 적용하지 않아도, 객체 인스턴스를 싱글톤으로 관리한다.
		- 컨테이너는 객체를 하나만 생성해서 관리한다.
	- 스프링 컨테이너는 싱글톤 컨테이너 역할을 한다. 이렇게 싱글톤 객체를 생성하고 관리하는 기능을 싱글톤 레지스트리라 한다.
	- 스프링 컨테이너의 이런 기능 덕분에 싱글턴 패턴의 모든 단점을 해결하면서 객체를 싱글톤으로 유지할 수 있다.
		- 싱글톤 패턴을 위한 지저분한 코드가 들어가지 않아도 된다.
		- DIP, OCP, 테스트, private 생성자로 부터 자유롭게 싱글톤을 사용할 수 있다.
		
※ 싱글톤 주의점
	- 싱글톤 패턴이든, 스프링 같은 싱글톤 컨테이너를 사용하든, 객체 인스턴스를 하나만 생성해서 공유하는 싱글톤
	방식은 여러 클라이언트가 하나의 같은 객체 인스턴스를 공유하기 때문에 싱글톤 객체는 상태를 유지(stateful)하게 설계하면 안된다.
	- 무상태(stateless)로 설계해야 한다.
		- 특정 클라이언트에 의존적인 필드가 있으면 안된다.
		- 특정 클라이언트가 값을 변경할 수 있는 필드가 있으면 안된다.
		- 가급적 읽기만 가능해야 한다.
		- 필드 대신에 자바에서 공유되지 않는, 지역변수, 파라미터, ThreadLocal 등을 사용해야 한다.
		
=================================================================================================================================================================================

ConfigurationSingletonTest.java에서 MemberRepository는 3번 호출될거 같지만 실제로는 1번만 호출된다.
그 이유는 @Configuration을 적용한 AppConfig에 있다.
Bean : class hello.core.AppConfig$$SpringCGLIB$$0 에서 보듯이
내가 만든 클래스가 아니라 스프링이 CGLIB라는 바이트코드 조작 라이브러리를 사용해서 AppConfig 클래스를 상속받은 임의의 
다른 클래스를 만들고, 그 다른 클래스를 스프링 빈으로 등록한 것이다.

※ @Configuration을 적용하지 않고, @Bean만 적용하면?(@Configuration을 붙이면 바이트코드를 조작하는 CGLIB 기술을 사용해서 싱글톤을 보장하지만, 만약 @Bean만 적용하면?)
	AppConfig.java에 @Configuration을 주석처리하고 ConfigurationSingletonTest.java를 돌려보면 스프링 빈으로는 등록되지만 싱글톤 적용이 안된것을 확인할 수 있다.
	
=================================================================================================================================================================================

※ @ComponentScan : @Component 가 붙은 모든 클래스를 스프링 빈으로 등록
	- 스프링 빈의 기본 이름은 클래스명을 사용하되 카멜 케이스를 사용(MemberServiceImpl 클래스 memberServiceImpl)
	- 빈 이름 직접 지정: 만약 스프링 빈의 이름을 직접 지정하고 싶으면 @Component("memberService2")
	
	@ComponentScan(
		basePackages = "hello.core",	
		excludeFilters = @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = Configuration.class)
	)
	
	※ 탐색 위치와 기본 스캔 대상
		- basePackages 속성 		: 탐색할 패키지의 시작 위치를 지정한다. 이 패키지를 포함하여 하위 패키지를 모두 탐색
		- basePackageClasses 속성	: 지정한 클래스의 패키지를 탐색 시작 위치로 지정한다.
			- 만약 지정하지 않으면 @ComponentScan이 붙은 설정 정보 클래스의 패키지가 시작위치가 된다.
	
		권장하는 방법 : 패키지 위치를 지정하지 않고, 설정 정보 클래스의 위치를 프로젝트 최상단(프로젝트 시작 루트)에 두는 것이다. 
					스프링 부트도 이 방법을 기본으로 제공한다.(@SpringBootApplication에 @ComponentScan이 내장되어 있다!!!!!!!!!!)
	 				CoreApplication.java의 패키지는 package hello.core;이다.
	 				그러면 hello.core부터 그 하위 패키지를 포함한다.
	 
	 - 스캔 대상
	 	- @Component : 컴포넌트 스캔에서 사용
		- @Configuration : 스프링 설정 정보에서 사용
		- @Controller : 스프링 MVC 컨트롤러에서 사용
		- @Service : 스프링 비즈니스 로직에서 사용
		- @Repository : 스프링 데이터 접근 계층에서 사용 / 스프링 데이터 접근 계층으로 인식하고, 데이터 계층의 예외를 스프링 예외로 변환
	
	※ 필터 		
	 	- includeFilters : 컴포넌트 스캔 대상을 추가로 지정한다.
		- excludeFilters : 컴포넌트 스캔에서 제외할 대상을 지정한다.
		- ComponentFilterAppConfigTest.java 참고
		
		- FilterType 옵션
			- ANNOTATION: 기본값이다., 애노테이션을 인식해서 동작한다.
			- ASSIGNABLE_TYPE: 지정한 타입과 자식 타입을 인식해서 동작한다.
			  ex) org.example.SomeClass
			- ASPECTJ: AspectJ 패턴 사용
			  ex) org.example..*Service+
			- REGEX: 정규 표현식
			  ex) org\.example\.Default.*
			- CUSTOM: TypeFilter라는 인터페이스를 구현해서 처리
			  ex) org.example.MyTypeFilter
	
	※ 중복 등록과 충돌	
		- 자동 빈 등록 vs 자동 빈 등록
			컴포넌트 스캔에 의해 자동으로 스프링 빈이 등록되는데, 그 이름이 같은 경우 스프링은 ConflictingBeanDefinitionException 예외를 발생시킨다.
		- 자동 빈 등록 vs 수동 빈 등록
			Overriding bean definition for bean 'memoryMemberRepository' with a different definition 	
		 	수동 빈 등록이 우선권을 가진다.(수동 빈이 자동 빈을 overriding 한다)

※ 참고 - 사실 어노테이션에는 상속관계라는 것이 없다. 그래서 어노테이션이 특정 어노테이션을 들고 있는 것을 인식할 수 있는 것은 스프링이 지원하는 기능이다.

=================================================================================================================================================================================

※ 의존관계 주입 방법
	- 생성자 주입(강추)
		- 생성자 호출 시점에 딱 1번만 호출 되는 것을 보장(불변, 필수 의존관계에 사용)
		- 생성자가 딱 1개만 있으면 @Autowired 생략 가능(스프링 빈에만 해당)
		- 필드에 final 키워드를 사용할 수 있다
	- 수정자 주입(setter 주입)
		- setter를 통해 필드 값을 변경
		- 선택, 변경 가능성이 있는 의존관계에 사용
	- 필드 주입
		- 외부에서 변경이 불가능해서 테스트 하기 힘들다
		- DI 프레임워크가 없으면 아무것도 할 수 없다.
	- 일반 메소드 주입
		- 잘 사용하지 않음
		 				
※ @Autowired : 스프링 컨테이너가 자동으로 해당 스프링 빈을 찾아서 주입한다.
	- 기본 조회 전략은 타입이 같은 빈을 찾아서 주입(getBean(MemberRepository.class)와 동일)
	- OrderServiceImpl처럼 생성자에 파라미터가 많아도 스프링 컨테이너에서 다 찾아서 자동으로 주입
	
※ 주입할 스프링 빈이 없어도 동작해야 할 때 @Autowired만 사용하면 required 옵션의 기본값이 true 이기 때문에 에러가 발생한다.
자동 주입 대상을 옵션으로 처리하는 방법은 hello.core.autowired의 AutowiredTest.java 참고 	
	
=================================================================================================================================================================================

※ 조회 대상 빈이 2개 이상일 때 해결 방법
	- @Autowired 필드 명 매칭
		- 빈이 여러개면 필드 이름이나 파라미터 이름으로 빈 이름을 매핑(스프링 부트 3.2부터 매개변수의 이름을 인식하지 못하는 문제)
	- @Qualifier 매칭
		- 빈 이름을 변경하는 것이 아니라 추가 구분자를 붙여주는 방식
		- @Qualifier는 @Qualifier를 찾는 용도로만 사용하자!!!!
			- 1. @Qualifier에 해당하는 @Qualifier를 찾아본다.
			- 2. 빈 이름중에 찾아본다. 
			- 3. NoSuchBeanDefinitionException이 발생
		- 구분자를 직접 정하다 보니까 구분자가 틀려도 컴파일시 체크가 안됨.
	- @Primary 사용	
		- 여러개의 빈이 매칭되면 @Primary가 우선권을 가진다.