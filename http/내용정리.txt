※ 인터넷 네트워크
	1. IP(Internet Protocol)
		- 지정한 IP 주소(IP Address)에 데이터 전달
		- 패킷(Packet)이라는 통신 단위로 데이터 전달(패킷은 출발지IP, 도착지IP, 전송할 데이터 등등으로 구성)
		
		※ 한계
			- 비연결성
				• 패킷을 받을 대상이 없거나 서비스 불능 상태여도 패킷 전송
			- 비신뢰성
				• 중간에 패킷이 소실
				• 패킷 순서 보장X
			- 프로그램 구분
				• 같은 IP를 사용하는 서버에서 통신하는 애플리케이션이 둘 이상이면? => 어떤 애플리케이션으로 패킷을 보낼 것인지 구분할 수 없다.
		
	2. TCP, UDP
		1) TCP(전송 제어 프로토콜(Transmission Control Protocol))
			- IP 패킷에 TCP 세그먼트(포트번호, 전송제어, 순서, 검증정보 등등)을 집어넣음
			- 연결지향 - TCP 3 way handshake (가상 연결)
				• SYN : 접속요청, ACK : 요청수락
					① 클라이언트 SYN
					② 서버 SYN + ACK
					③ 클라이언트 ACK(데이터 함께 전송 가능)
			- 데이터 전달 보증
			- 순서 보장
				① 메세지 용량이 커서 잘라서 1, 2, 3번 순서대로 보냈는데, 서버에서 1, 3, 2번 순서로 도착을 해버렸다.
				② 잘못 전송된 패킷을 기준으로 다시 보내라고 요청을 해서 다시 패킷을 받는다.
			- 신뢰할 수 있는 프로토콜
			- 현재는 대부분 TCP 사용
			
		2) UDP(사용자 데이터그램 프로토콜(User Datagram Protocol))
			- 연결지향 X - TCP 3 way handshake X
			- 데이터 전달 보증 X
			- 순서 보장 X
			- 데이터 전달 및 순서가 보장되지 않지만, 단순하고 빠름(멀티미디어 스트리밍 애플리케이션, 온라인 게임, 인터넷 전화 애플리케이션과 같은 실시간으로 데이터가 오고 가는 서비스에서 많이 사용)
			- IP와 거의 같다고 보면되고, IP 정보에 PORT와 체크섬(메시지 검증해주는 데이터) 정도만 추가된 형태
			- IP에 기능이 거의 추가되지 않은 하얀 도화지 같은 상태이기 때문에 최적화 및 커스터마이징이 용이하다.

	3. PORT
		- 컴퓨터에서 카카오톡, 게임, 노래를 듣고 있는 상황이면 여러 개의 서버와 통신을 하고 있다.
		  패킷들이 자신의 IP로 날라올텐데 이게 어디에서 필요한 패킷인지 구분을 할 수가 없다. 반대로 보낼때도 마찬가지이다.
		  IP만 가지고는 해결을 할 수가 없기때문에 PORT가 존재한다.
		  IP는 아파트(목적지 서버)를 찾는 거고 포트는 몇동 몇호(그 서버 안에서 돌아가는 애플리케이션들을 구분)라고 생각하면 된다.
		  포트번호는 TCP 세그먼트에 들어있다.
		  
		- 0 ~ 65535 할당 가능
		- 0 ~ 1023: 잘 알려진 포트, 사용하지 않는 것이 좋음
			• FTP - 20, 21
			• TELNET - 23
			• HTTP - 80
			• HTTPS - 443
		
	4. DNS(Domain Name System)
		- IP는 기억하기 어렵고 변경 될 수 있다. 그렇기 때문에 중간에 전화번호부 같은 개념을 둬서, 도메인 명을 등록하면 IP 주소로 바꿀 수 있다.
		  
		  도메인명			IP
		  ---------------------------
		  google.com	200.200.200.2
		  aaa.com		210.210.210.3

=================================================================================================================================================================================

※ URI와 웹 브라우저 요청 흐름
	1. URI
		- URI(Uniform Resource Identifier) : URI는 로케이터(Locator), 이름(Name) 또는 둘 다 추가로 분류될 수 있다.
			- 사람들을 식별할 때 주민번호로 식별 할 수 있듯이 무슨 자원이 어디에 있는지 자원 자체를 식별
			- Uniform 	: 자원을 식별하는 통일된 방식
			- Resource	: 자원, URI로 식별할 수 있는 모든 것
			- Identifier: 다른 항목과 구분하는데 필요한 정보 
		- URL(Uniform Resource Locator)
			- 리소스의 위치
			- 위치는 변할 수 있다.
		- URN(Uniform Resource Name)
			- 리소스의 이름
			- 이름은 변하지 않는다.
			- 거의 사용하지 않음(URN 이름만으로 실제 리소스를 찾을 수 있는 방법이 보편화 되지 않음)
		※ URI는 URL과 URN을 포함한다.
		
		※ URL 문접
			- scheme://[userinfo@]host[:port][/path][?query][#fragment]
			- https://www.google.com:443/search?q=hello&hl=ko
			
			1) scheme
				- 주로 프로토콜(어떤 방식으로 자원에 접근할 것인가 하는 약속 규칙) 사용
				  예) http, https, ftp 등등
				  
			2) userinfo
				- URL에 사용자 정보를 포함해서 인증
				- 거의 사용하지 않음
				
			3) host
				- 도메인명 또는 IP 주소를 직접 사용 가능
				
			4) port
				- 일반적으로 생략, 생략 시 http는 80, https는 443
				
			5) path
				- 리소스 경로, 보통 계층적 구조
				  예) /home/file1.jpg, /members/100, /items/iphone15
				  
			6) query
				- key=value 형태
				- ?로 시작하고 &로 추가
				- query parameter, query string 등으로 불림
				
			7) fragment
				- html 내부 북마크 등에 사용
				- 서버에 전송하는 정보는 아님

	2. 웹 브라우저 요청 흐름
		https://google.com/search?q=hello&hl=ko 웹 브라우저에 요청을 하게 되면
			1) DNS 조회해서 IP 정보를 가져오고, 포트 정보 확인
			
			2) 웹 브라우저가 HTTP 요청 메세지를 생성
				
				(실제로는 추가정보가 더 존재한다.)
				GET /search?q=hello&hl=ko HTTP/1.1
				Host: www.google.com
			
			3) SOCKET 라이브러리를 통해 전달
				- TCP/IP 연결(3 way handshake)
				- 데이터 전달
				
			4) TCP/IP 패킷 생성, HTTP 메시지 포함
			
			5) 서버로 HTTP 메시지 전송
			
			6) 서버에서 HTTP 메시지를 조회 및 해석 
			
			7) 서버에서 HTTP 응답 메시지를 생성 후 클라이언트로 전송
			
				(실제로는 추가정보가 더 존재한다.)
				HTTP/1.1 200 OK
				Content-Type: text/html;charset=UTF-8
				Content-Length: 3423
				
				<html>
				 <body>...</body>
				</html>
			
			8) 클라이언트에서 받은 응답 메시지로 브라우저에 렌더링
		
=================================================================================================================================================================================

※ HTTP(HyperText Transfer Protocol)
	- HTML, TEXT
	- IMAGE, 음성, 영상, 파일
	- JSON, XML (API)
	- 거의 모든 형태의 데이터 전송 가능
	- 서버간에 데이터를 주고 받을 때도 대부분 HTTP 사용
	
	※ 기반 프로토콜
		- TCP: HTTP/1.1, HTTP/2
		- UDP: HTTP/3
	
	※ HTTP 특징
		1. 클라이언트 서버 구조
			• Request Response 구조
			• 클라이언트는 서버에 요청을 보내고, 응답을 대기
			• 서버가 요청에 대한 결과를 만들어서 응답
			
			★ 중요한건 클라이언트와 서버가 분리 되어야 한다는 것이다.
			클라이언트는 UI와 UX에 신경쓰고 서버는 비지니스 로직과 데이터에 집중을 하는 것이다.
			즉, 클라이언트와 서버를 독립적으로 구분한다는 것은 각자의 책임을 나눠 해당 책임에만 집중하여, 클라이언트와 서버 양쪽이 각각 독립적으로 고도화 될 수 있다는 것이다.
			
		2. 무상태 프로토콜(Stateless), 비연결성(Connectionless)
			- 상태유지(Stateful)
				- 서버가 클라이언트의 상태를 보존한다.
				- 예를 들면 쇼핑몰에서 물건을 고르고 결제를 해야 하는 상황
					• 물건을 고르고 다음 페이지로 이동
					• 색상을 고르고 다음 페이지로 이동
					• 사이즈를 고르고 다음 페이지로 이동
					• 결제 방식을 선택하고 결제
				하지만 중간에 서버가 장애나면 클라이언트는 처음부터 다시 작업을 요청해야한다.
				그래서 서버가 바뀔때마다 클라이언트의 내용을 기록해서 상태를 유지해야 되는데 쉽지 않다.
			
			- 무상태(Stateless)
				- 서버가 클라이언트의 상태를 보존하지 않는다.
				- 예를 들면 쇼핑몰에서 물건을 고르고 결제를 해야 하는 상황
					• 물건 선택, 색상 선택, 사이즈 선택, 결제 방식 선택하고 결제
				이러한 무상태 환경은 클라이언트가 상태 정보를 갖고 있는 것이기 때문에, 아무 서버나 호출해도 된다.(수평확장에 유리)
				하지만 상태유지(Stateful)보다 데이터를 많이 보내야 한다는 단점도 있다.
				
				• 서버가 클라이언트의 상태를 보존X
				• 장점: 서버 확장성 높음(스케일 아웃 = 수평확장)
				• 단점: 클라이언트가 추가 데이터 전송
							
			- 비연결성(Connectionless)
				- 서버와 클라이언트의 Connection 연결을 지속하지 않는다.
				- 클라이언트가 서버에 요청을 하고 응답을 받으면 바로 TCP/IP 연결을 끊어 연결을 유지하지 않음으로써 서버의 자원을 효율적으로 관리하고 수 많은 클라이언트의 요청에 대응할 수 있게 함
				
				※ 비연결성 한계와 극복
					• 웹 브라우저로 사이트를 요청하면 HTML 뿐만 아니라 자바스크립트, css, 이미지 등등 수 많은 자원이 필요하다.
					HTTP 초기에는 모든 자료에 대해서 비연결성으로 각각의 자원에 대해 연결/응답/종료를 반복했다.(새로 연결을 맺을 때 마다 3 way handshake 발생)
						
					• 지금은 HTTP 지속 연결(Persistent Connections)로 문제 해결
						• 웹 브라우저로 사이트를 요청하면 HTML 뿐만 아니라 자바스크립트, css, 추가 이미지 등등 수 많은 자원이 함께 다운로드되고 연결을 종료한다.
						• HTTP/2, HTTP/3에서 더 많은 최적화
					
		3. HTTP 메시지
			- HTTP 메시지 구조
				• 요청 메시지
				(start-line)
				GET /search?q=hello&hl=ko HTTP/1.1
				(header)
				Host: www.google.com
				(empty line)(CRLF)
				(message body)
				(...)
								
				• 응답 메시지
				(start-line)
				HTTP/1.1 200 OK
				(header)
				Content-Type: text/html;charset=UTF-8
				Content-Length: 3423
				(empty line)(CRLF)
				(message body)
				<html>
				    <body>...</body>
				</html>
				
				1) start-line 시작 라인
					• start-line = request-line 또는 status-line
						1-1) request-line(요청 메시지)
						• request-line = method + SP(공백) + request-target + SP(공백) + HTTP-version + CRLF(엔터)
							- method
								• GET, POST, DELETE, PUT 등등
							- request-target
								• absolute-path[?query] (절대경로[?쿼리])
								• 절대경로는 "/" 로 시작하는 경로
								
						1-2) status-line(응답 메시지)
						• status-line = HTTP-version + SP(공백) + status-code + SP(공백) + reason-phrase + CRLF(엔터)
							- status-code(상태코드)
								• 200, 400, 500 등등
							- reason-phrase
								• 이유문구: 사람이 이해할 수 있는 짧은 상태 코드 설명 글
						
				2) header 헤더
					• header-field = field-name + ":" + OWS(띄어쓰기 허용) + field-value + OWS(띄어쓰기 허용)
						- HTTP 전송에 필요한 모든 부가정보
						- 필요시 임의의 헤더 추가 가능
								
				3) message body
					• 실제 전송할 데이터
					• HTML 문서, 이미지, 영상, JSON 등등 byte로 표현할 수 있는 모든 데이터 전송 가능
					
		4. 단순함, 확장 가능

=================================================================================================================================================================================

★ 회원 정보 관리 API를 만든다고 가정 ★
리소스는 회원이다. 회원이라는 개념 자체가 바로 리소스다. 그렇기 때문에 
• 회원 목록 조회 	/read-member-list		=> /members
• 회원 조회 		/read-member-by-id		=> /members/{id}
• 회원 등록 		/create-member			=> /members/{id}
• 회원 수정 		/update-member			=> /members/{id}
• 회원 삭제 		/delete-member			=> /members/{id}
왼쪽이 아니라 오른쪽 처럼 URI를 설계해야한다.
리소스(명사)는 회원이고 행위(메소드)(동사)는 조회, 등록, 삭제, 변경이다.
이 행위를 구분하기 위해 HTTP 메소드가 있다.


※ HTTP 메소드
	★ 주요 메소드
		1. GET: 리소스 조회
		2. POST: 요청 데이터 처리, 주로 등록에 사용
		3. PUT: 리소스를 대체, 해당 리소스가 없으면 생성
		4. PATCH: 리소스 부분 변경
		5. DELETE: 리소스 삭제
	
	기타 메소드
		- HEAD: GET과 동일하지만 메시지 부분을 제외하고, 상태 줄과 헤더만 반환
		- OPTIONS: 대상 리소스에 대한 통신 가능 옵션(메서드)을 설명(주로 CORS에서 사용)
		- CONNECT: 대상 리소스로 식별되는 서버에 대한 터널을 설정
		- TRACE: 대상 리소스에 대한 경로를 따라 메시지 루프백 테스트를 수행
	
	1. GET
		- 리소스 조회
		- 서버에 전달하고 싶은 데이터는 query(쿼리 파라미터, 쿼리 스트링)를 통해서 전달
		- 메시지 바디를 사용해서 데이터를 전달할 수 있지만, 지원하지 않는 곳이 많아서 권장하지 않음
		
	2. POST
		- 요청 데이터 처리
		- 메시지 바디를 통해 서버로 요청 데이터 전달
		- 서버는 요청 데이터를 처리
			• 메시지 바디를 통해 들어온 데이터를 처리하는 모든 기능을 수행한다.
		- 주로 전달된 데이터로 신규 리소스 등록, 프로세스 처리에 사용
		
		※ 정리
			- 새 리소스 생성(등록) 
				• 서버가 아직 식별하지 않은 새 리소스 생성
			- 요청 데이터 처리
				• 단순히 데이터를 생성하거나, 변경하는 것을 넘어서 프로세스를 처리해야 하는 경우
				예) 주문에서 결제완료 -> 배달시작 -> 배달완료 처럼 단순히 값 변경을 넘어 프로세스의 상태가 변경되는 경우
				• POST의 결과로 새로운 리소스가 생성되지 않을 수도 있음
				예) POST /orders/{orderId}/start-delivery (컨트롤 URI)
			- 다른 메서드로 처리하기 애매한 경우
				• 애매하면 POST
				예) JSON으로 조회 데이터를 넘겨야 하는데, GET 메서드를 사용하기 어려운 경우
				
	3. PUT
		- 리소스를 대체
			• 리소스가 있으면 대체
			• 리소스가 없으면 생성
			• 쉽게 이야기해서 덮어버림
		- 클라이언트가 리소스를 식별
			• 클라이언트가 리소스 위치를 알고 URI 지정
			
	4. PATCH
		- 리소스 부분 변경
		
※ HTTP 메소드의 속성
	1. 안전(Safe Methods)
		- 호출해도 리소스를 변경하지 않는다.(호출해도 리소스가 변경되지 않는다.)
		- 간단하게 GET 메서드는 단순히 데이터를 조회하는 기능을 수행하기 때문에 리소스를 변경 및 수정하지 않으니 안전한다.

	2. 멱등(Idempotent Methods)
		- 사전적 의미로 연산을 여러 번 적용하더라도 결괏값이 달라지지 않는 일
		- 동일한 요청을 한 번 보내든 두 번 보내든 100번 보내든 결과가 똑같다.
		- 멱등성을 따질 땐 서버의 상태를 봐야 되며, 똑같은 요청을 하더라도 응답하는 상태코드는 다를 수 있다.
		- 멱등 메서드
			• GET: 한 번 조회하든, 두 번 조회하든 같은 결과가 조회된다.
			• PUT: 같은 요청을 계속 호출해도 항상 대상 리소스를 덮어쓰기 때문에 동일한 상태이다.
			• DELETE: 삭제를 함으로 써 처음과 응답 값이 다르겠지만(200 OK 또는 404 NOT FOUND), 서버 상태 자체는 바뀌지 않는다는 것이다.
			• POST: 멱등이 아니다! 같은 요청을 계속 호출하면 새로운 리소스가 생성되거나 리소스의 상태가 달라질 수 있다.
		- 활용
			• 자동 복구 메커니즘
			• 서버가 TIMEOUT 등으로 정상 응답을 못주었을 때, 클라이언트가 같은 요청을 다시 해도 되는가? 판단 근거
		- 멱등은 외부 요인으로 중간에 리소스가 변경되는 것 까지는 고려하지는 않는다.
		
	3. 캐시가능(Cacheable Methods)
		- 응답 결과 리소스를 캐시해서 사용해도 되는가?
		- GET, HEAD, POST, PATCH 캐시가능
		- 실제로는 GET, HEAD 정도만 캐시로 사용
			• POST, PATCH는 본문 내용까지 캐시 키로 고려해야 하는데, 구현이 쉽지 않음

	★ 참고 : https://ko.wikipedia.org/wiki/HTTP

=================================================================================================================================================================================

※ 클라이언트에서 서버로 데이터 전송
	- 쿼리 파라미터를 통한 데이터 전송
		• GET
		• 주로 정렬 필터(검색어)
	- 메시지 바디를 통한 데이터 전송
		• POST, PUT, PATCH
		• 회원 가입, 상품 주문, 리소스 등록, 리소스 변경

	※ 4가지 상황에 대한 예시
		1. 정적 데이터 조회
			- 이미지, 정적 텍스트 문서
				• 조회는 GET 사용
				• 정적 데이터는 일반적으로 쿼리 파라미터 없이 리소스 경로로 단순하게 조회 가능
				
		2. 동적 데이터 조회
			- 주로 검색, 게시판 목록에서 정렬 필터(검색어)
				• 조회 조건을 줄여주는 필터, 조회 결과를 정렬하는 정렬 조건에 주로 사용
				• 조회는 GET 사용
				• GET은 쿼리 파라미터를 사용해서 데이터를 전달
				
		3. HTML Form을 통한 데이터 전송
			- 회원가입, 상품주문, 데이터 변경
				• Content-Type: application/x-www-form-urlencoded 사용
					• form의 내용을 메시지 바디를 통해서 전송(key=value, 쿼리 파라미터 형식)
					• 전송 데이터를 url encoding 처리
				• Content-Type: multipart/form-data
					• 파일 업로드 같은 바이너리 데이터 전송시 사용
					• 다른 종류의 여러 파일과 폼의 내용 함께 전송 가능(그래서 이름이 multipart)
				• 참고: HTML Form 전송은 GET, POST만 지원
				
		4. HTTP API를 통한 데이터 전송
			- 서버 to 서버
				• 백엔드 시스템 통신
			- 앱 클라이언트
				• 아이폰, 안드로이드
			- 웹 클라이언트(AJAX)
				• HTML에서 Form 전송 대신 자바 스크립트를 통한 통신에 사용(AJAX)
			- POST, PUT, PATCH: 메시지 바디를 통해 데이터 전송
			- GET: 조회, 쿼리 파라미터로 데이터 전달
			- Content-Type: application/json을 주로 사용
			
=================================================================================================================================================================================

※ 회원 관리 시스템 예시
	• 회원 목록 /members 		-> GET
	• 회원 등록 /members 		-> POST
	• 회원 조회 /members/{id} 	-> GET
	• 회원 수정 /members/{id} 	-> PATCH, PUT, POST
	• 회원 삭제 /members/{id} 	-> DELETE

	※ POST - 신규 자원 등록 특징
		- 클라이언트는 등록될 리소스의 URI를 모른다.
			• 회원 등록 /members -> POST
			• POST /members
		- 서버가 새로 등록된 리소스 URI를 생성해준다.
			• HTTP/1.1 201 Created
			  Location: /members/100 
		- 이러한 형식을 컬렉션(Collection)이라고 한다.
			• 서버가 관리하는 리소스 디렉토리
			• 서버가 리소스의 URI를 생성하고 관리
			• 여기서 컬렉션은 /members

※ 파일 관리 시스템 예시
	• 파일 목록 		/files 				-> GET
	• 파일 조회 		/files/{filename} 	-> GET
	• 파일 등록 		/files/{filename} 	-> PUT
	• 파일 삭제 		/files/{filename} 	-> DELETE 
	• 파일 대량 등록 	/files 				-> POST
	
	※ PUT - 신규 자원 등록 특징
		- 클라이언트가 리소스 URI를 알고 있어야 한다.
			• 파일 등록 /files/{filename} -> PUT
			• PUT /files/star.jpg
		- 클라이언트가 직접 리소스의 URI를 지정한다.
		- 이러한 형식을 스토어(Store)라고 한다.
			• 클라이언트가 관리하는 리소스 저장소
			• 클라이언트가 리소스의 URI를 알고 관리
			• 여기서 스토어는 /files

※ Post 기반과 Put 기반 중 Post 기반을 대부분 사용

※ HTML FORM 사용
	• 회원 목록 	/members 							-> GET
	• 회원 등록 폼 	/members/new 						-> GET
	• 회원 등록 	/members/new, /members 				-> POST
	• 회원 조회 	/members/{id} 						-> GET
	• 회원 수정 폼 	/members/{id}/edit 					-> GET
	• 회원 수정 	/members/{id}/edit, /members/{id} 	-> POST
	• 회원 삭제 	/members/{id}/delete 				-> POST
	
	- HTML FORM은 GET, POST만 지원
	- 컨트롤 URI 
		• GET, POST만 지원하므로 제약이 있음
		• 이런 제약을 해결하기 위해 동사로 된 리소스 경로 사용
		• POST의 /new, /edit, /delete가 컨트롤 URI
		• HTTP 메서드로 해결하기 애매한 경우 사용(HTTP API 포함)
	
★ 정리
	- 문서(document) 
		• 단일 개념(파일 하나, 객체 인스턴스, 데이터베이스 row)
		• 예) /members/100, /files/star.jpg
	- 컬렉션(collection) 
		• 서버가 관리하는 리소스 디렉터리
		• 서버가 리소스의 URI를 생성하고 관리
		• 예) /members
	- 스토어(store) 
		• 클라이언트가 관리하는 자원 저장소
		• 클라이언트가 리소스의 URI를 알고 관리
		• 예) /files
	- 컨트롤러(controller), 컨트롤 URI 
		• 문서, 컬렉션, 스토어로 해결하기 어려운 추가 프로세스 실행
		• 동사를 직접 사용
		• 예) /members/{id}/delete
		
	참고 : https://restfulapi.net/resource-naming/
	
=================================================================================================================================================================================

※ 참고 : https://ko.wikipedia.org/wiki/HTTP
※ 상태 코드 : 클라이언트가 보낸 요청의 처리 상태를 응답에서 알려주는 기능
	- 1xx (Informational)	: 요청이 수신되어 처리중
	- 2xx (Successful)		: 요청 정상 처리
	- 3xx (Redirection)		: 요청을 완료하려면 추가 행동이 필요
	- 4xx (Client Error)	: 클라이언트 오류, 잘못된 문법등으로 서버가 요청을 수행할 수 없음
	- 5xx (Server Error)	: 서버 오류, 서버가 정상 요청을 처리하지 못함
	
	1. 1xx (Informational)
		- 요청이 수신되어 처리중
		- 거의 사용되지 않음
		
	2. 2xx (Successful)
		- 클라이언트의 요청을 성공적으로 처리
		- 200 OK
			• 요청 성공
		- 201 Created
			• 요청 성공해서 새로운 리소스가 생성됨
		- 202 Accepted
			• 요청이 접수되었으나 처리가 완료되지 않았음
			• 배치 처리 같은 곳에서 사용
		- 204 No Content
			• 서버가 요청을 성공적으로 수행했지만, 응답 페이로드 본문에 보낼 데이터가 없음
			• 결과 내용이 없어도 204 메시지(2xx)만으로 성공을 인식할 수 있다.
			
	3. 3xx (Redirection)
		- 요청을 완료하기 위해 유저 에이전트의 추가 조치 필요
		- 웹 브라우저는 3xx 응답의 결과에 Location 헤더가 있으면, Location 위치로 자동 이동
		- 리다이렉션 종류
			1) 영구 리다이렉션 - 특정 리소스의 URI가 영구적으로 이동
				- 예) /members -> /users, /event -> /new-event
				- 리소스의 URI가 영구적으로 이동
				- 원래의 URL를 사용X, 검색 엔진 등에서도 변경 인지
				
				- 301 Moved Permanently
					• 리다이렉트시 요청 메서드가 GET으로 변하고, 본문이 제거될 수 있음(MAY) 
				- 308 Permanent Redirect 
					• 301과 기능은 같음
					• 리다이렉트시 요청 메서드와 본문 유지(처음 POST를 보내면 리다이렉트도 POST 유지)
				
			2) 일시 리다이렉션 - 일시적인 변경(많이 사용)
				- 주문 완료 후 주문 내역 화면으로 이동
				- PRG: Post/Redirect/Get
				
				- 리소스의 URI가 일시적으로 변경
				- 따라서 검색 엔진 등에서 URL을 변경하면 안됨
				
				- 302 Found(많은 애플리케이션 라이브러리들이 기본값으로 사용 중)
					• 리다이렉트시 요청 메서드가 GET으로 변하고, 본문이 제거될 수 있음(MAY)
				- 303 See Other 
					• 302와 기능은 같음
					• 리다이렉트시 요청 메서드가 GET으로 변경 
				- 307 Temporary Redirect 
					• 302와 기능은 같음
					• 리다이렉트시 요청 메서드와 본문 유지(요청 메서드를 변경하면 안된다. MUST NOT) 
				
				★ PRG: Post/Redirect/Get
					• POST로 주문후에 웹 브라우저를 새로 고침을 누르면 다시 주문이 요청된다. 그러면 중복으로 주문이 들어가버린다.
					POST로 주문 후에 새로 고침으로 인한 중복 주문 방지를 위해 주문 후에 주문 결과 화면을 GET 메서드로 리다이렉트한다.
					그렇게 되면 새로 고침을 눌러도 해도 GET으로 결과 화면만 조회하게 된다.	
									
			3) 기타 리다이렉션
				- 300 Multiple Choices
					• 거의 사용하지 않음 
				- 304 Not Modified
					• 캐시를 목적으로 사용
					• 클라이언트에게 리소스가 수정되지 않았음을 알려준다. 따라서 클라이언트는 로컬PC에 저장된 캐시를 재사용한다. (캐시로 리다이렉트 한다.)
					• 304 응답은 응답에 메시지 바디를 포함하면 안된다. (로컬 캐시를 사용해야 하므로)
					• 조건부 GET, HEAD 요청시 사용
	
	4. 4xx (Client Error)
		- 클라이언트의 요청에 잘못된 문법등으로 서버가 요청을 수행할 수 없음
		- 오류의 원인이 클라이언트에 있음
		- 클라이언트가 이미 잘못된 요청, 데이터를 보내고 있기 때문에, 똑같은 재시도가 실패함
		
		- 400 Bad Request
			• 클라이언트가 잘못된 요청을 해서 서버가 요청을 처리할 수 없음
			• 요청 구문, 메시지 등등 오류
			• 클라이언트는 요청 내용을 다시 검토하고, 보내야함
			• 예) 요청 파라미터가 잘못되거나, API 스펙이 맞지 않을 때
		- 401 Unauthorized
			• 클라이언트가 해당 리소스에 대한 인증이 필요함
			• 인증(Authentication) 되지 않음
			• 401 오류 발생시 응답에 WWW-Authenticate 헤더와 함께 인증 방법을 설명
		- 403 Forbidden
			• 서버가 요청을 이해했지만 승인을 거부함
			• 주로 인증 자격 증명은 있지만, 접근 권한이 불충분한 경우
			• 예) 관리자가 아닌 사용자가 로그인은 했지만, 관리자 등급의 리소스에 접근하는 경우
		- 404 Not Found
			• 요청 리소스를 찾을 수 없음
			• 요청 리소스가 서버에 없음
			• 또는 클라이언트가 권한이 부족한 리소스에 접근할 때 해당 리소스를 숨기고 싶을 때
			
	5. 5xx (Server Error)
		- 서버 문제로 오류 발생
		- 서버에 문제가 있기 때문에 재시도 하면 성공할 수도 있음(복구가 되거나 등등)
		
		- 500 Internal Server Error
			• 서버 문제로 오류 발생, 애매하면 500 오류
			• 서버 내부 문제로 오류 발생
			• 애매하면 500 오류
		- 503 Service Unavailable
			• 서비스 이용 불가
			• 서버가 일시적인 과부하 또는 예정된 작업으로 잠시 요청을 처리할 수 없음
			• Retry-After 헤더 필드로 얼마뒤에 복구되는지 보낼 수도 있음

=================================================================================================================================================================================

※ HTTP Header
	- header-field = field-name + ":" + OWS(띄어쓰기 허용) + field-value + OWS(띄어쓰기 허용)
	- field-name은 대소문자 구문 없음
	- HTTP 전송에 필요한 모든 부가정보
	- 예) 메시지 바디의 내용, 메시지 바디의 크기, 압축, 인증, 요청 클라이언트, 서버 정보, 캐시 관리 정보...
	- 표준 헤더는 엄청 많음(https://en.wikipedia.org/wiki/List_of_HTTP_header_fields)
	- 필요시 임의의 헤더 추가 가능
	
	※ 역사
	과거에는 HTTP Header를 4가지로 분류를 했다.
		• General 헤더: 메시지 전체에 적용되는 정보, 예) Connection: close
		• Request 헤더: 요청 정보, 예) User-Agent: Mozilla/5.0 (Macintosh; ..)
		• Response 헤더: 응답 정보, 예) Server: Apache
		• Entity 헤더: 엔티티 바디 정보, 예) Content-Type: text/html, Content-Length: 3423
	지금에는
		• 엔티티(Entity) -> 표현(Representation)
		• Representation = representation Metadata + Representation Data
		• 표현 = 표현 메타데이터 + 표현 데이터
	
	※ 표현 헤더
		- Content-Type: 표현 데이터의 형식
			• 미디어 타입, 문자 인코딩
			• 예) text/html; charset=utf-8, application/json, image/png
			
		- Content-Encoding: 표현 데이터의 압축 방식
			• 표현 데이터를 압축하기 위해 사용
			• 데이터를 전달하는 곳에서 압축 후 인코딩 헤더 추가
			• 데이터를 읽는 쪽에서 인코딩 헤더의 정보로 압축 해제
			• 예) gzip, deflate, identity
			
		- Content-Language: 표현 데이터의 자연 언어
			• 표현 데이터의 자연 언어를 표현
			• 예) ko, en, en-US
			
		- Content-Length: 표현 데이터의 길이
			• 바이트 단위
			• Transfer-Encoding(전송 코딩)을 사용하면 Content-Length를 사용하면 안됨
		
		- 표현 헤더는 전송, 응답 둘다 사용
	
	※ 협상 헤더(Content negotiation) : 클라이언트가 원하는 표현으로 달라고 서버에 요청
		- Accept: 클라이언트가 선호하는 미디어 타입 전달
		- Accept-Charset: 클라이언트가 선호하는 문자 인코딩
		- Accept-Encoding: 클라이언트가 선호하는 압축 인코딩
		- Accept-Language: 클라이언트가 선호하는 자연 언어
		
		- 협상 헤더는 요청시에만 사용
		
		※ 협상과 우선순위 1
			- Quality Values(q) 값 사용
			- 0~1, 클수록 높은 우선순위
			- 생략하면 1
			- Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
				• 1. ko-KR;q=1 (q생략)
				• 2. ko;q=0.9
				• 3. en-US;q=0.8
				• 4. en;q=0.7
		
		※ 협상과 우선순위 2
			- 구체적인 것이 우선한다.
			- Accept: text/*, text/plain, text/plain;format=flowed, */*
				1. text/plain;format=flowed
				2. text/plain
				3. text/*
				4. */*
	
	※ 전송 방식
		- 단순 전송
			예)
			HTTP/1.1 200 OK
			Content-Type: text/html;charset=UTF-8
			Content-Length: 3423 
			
			<html>
			 <body>...</body>
			</html>
	
		- 압축 전송
			예)
			HTTP/1.1 200 OK
			Content-Type: text/html;charset=UTF-8
			Content-Encoding: gzip 
			Content-Length: 521
			
			lkj123kljoiasudlkjaweioluywlnfdo912u34ljko98udjkl
			
		- 분할 전송
			예)
			HTTP/1.1 200 OK
			Content-Type: text/plain
			Transfer-Encoding: chunked 
			
			5
			Hello
			5
			World
			0
			\r\n
	
		- 범위 전송
			예)
			HTTP/1.1 200 OK
			Content-Type: text/plain
			Content-Range: bytes 1001-2000 / 2000
			
			qweqwe1l2iu3019u2oehj1987askjh3q98y
			
	※ 일반 정보
		- From: 유저 에이전트의 이메일 정보
			• 일반적으로 잘 사용되지 않음
			• 검색 엔진 같은 곳에서, 주로 사용
			• 요청에서 사용
			
		- Referer: 이전 웹 페이지 주소
			• 현재 요청된 페이지의 이전 웹 페이지 주소
			• Referer를 사용해서 유입 경로 분석 가능(데이터 분석 할 때 많이 사용)
			• A -> B로 이동하는 경우 B를 요청할 때 Referer: A 를 포함해서 요청
			• 요청에서 사용
			• 참고: referer는 단어 referrer의 오타
			
		- User-Agent: 유저 에이전트 애플리케이션 정보
			• 클라이언트의 애플리케이션 정보(웹 브라우저 정보, 등등)
			• 통계 정보
			• 어떤 종류의 브라우저에서 장애가 발생하는지 파악 가능
			• 요청에서 사용
			
		- Server: 요청을 처리하는 오리진 서버의 소프트웨어 정보
			• Server: Apache/2.2.22 (Debian)
			• server: nginx
			• 응답에서 사용
			
		- Date: 메시지가 생성된 날짜
			• Date: Tue, 15 Nov 1994 08:12:31 GMT
			• 응답에서 사용
	
	※ 특별한 정보
		- Host: 요청한 호스트 정보(도메인)
			• 필수값
			• 요청에서 사용
			• 하나의 서버가 여러 도메인을 처리해야 할 때
			• 하나의 IP 주소에 여러 도메인이 적용되어 있을 때
			
		- Location: 페이지 리다이렉션
			• 웹 브라우저는 3xx 응답의 결과에 Location 헤더가 있으면, Location 위치로 자동 이동(리다이렉트)
			• 201 (Created): Location 값은 요청에 의해 생성된 리소스 URI
			• 3xx (Redirection): Location 값은 요청을 자동으로 리디렉션하기 위한 대상 리소스를 가리킴
			
		- Allow: 허용 가능한 HTTP 메서드
			• 405 (Method Not Allowed) 에서 응답에 포함해야함
			• Allow: GET, HEAD, PUT
			
		- Retry-After: 유저 에이전트가 다음 요청을 하기까지 기다려야 하는 시간
			• 503 (Service Unavailable): 서비스가 언제까지 불능인지 알려줄 수 있음
			• Retry-After: Fri, 31 Dec 1999 23:59:59 GMT (날짜 표기)
			• Retry-After: 120 (초단위 표기)
	
	※ 인증
		- Authorization: 클라이언트 인증 정보를 서버에 전달
		- WWW-Authenticate: 리소스 접근시 필요한 인증 방법 정의
			• 401 Unauthorized 응답과 함께 사용
			• WWW-Authenticate: Newauth realm="apps", type=1, title="Login to \"apps\"", Basic realm="simple"
	
	※ 쿠키
		- 예) set-cookie: sessionId=abcde1234; expires=Sat, 26-Dec-2020 00:00:00 GMT; path=/; domain=.google.com; Secure
		- 사용처
			• 사용자 로그인 세션 관리
			• 광고 정보 트래킹
		- 쿠키 정보는 항상 서버에 전송됨
			• 네트워크 트래픽 추가 유발
			• 최소한의 정보만 사용(세션 id, 인증 토큰)
			• 서버에 전송하지 않고, 웹 브라우저 내부에 데이터를 저장하고 싶으면 웹 스토리지(localStorage, sessionStorage) 참고
		
		- 생명 주기
			• Set-Cookie: expires=Sat, 26-Dec-2020 04:39:21 GMT
				• 만료일이 되면 쿠키 삭제
			• Set-Cookie: max-age=3600 (3600초)
				• 0이나 음수를 지정하면 쿠키 삭제
			• 세션 쿠키: 만료 날짜를 생략하면 브라우저 종료 시 까지만 유지
			• 영속 쿠키: 만료 날짜를 입력하면 해당 날짜까지 유지
		
		- 도메인
			• 예) domain=example.org
			• 명시: 명시한 문서 기준 도메인 + 서브 도메인 포함
				• domain=example.org를 지정해서 쿠키 생성
				• example.org는 물론이고 dev.example.org도 쿠키 접근
			• 생략: 현재 문서 기준 도메인만 적용
				• example.org 에서 쿠키를 생성하고 domain 지정을 생략
				• example.org 에서만 쿠키 접근 가능, dev.example.org는 쿠키 미접근
		
		- 경로
			• 이 경로를 포함한 하위 경로 페이지만 쿠키 접근
			• 일반적으로 path=/ 루트로 지정
			• 예) path=/home 지정
				• /home -> 가능
				• /home/level1 -> 가능
				• /home/level1/level2 -> 가능
				• /hello -> 불가능
		
		- 보안
			• Secure
				• 쿠키는 http, https를 구분하지 않고 전송
				• Secure를 적용하면 https인 경우에만 전송
			• HttpOnly
				• XSS 공격 방지
				• 자바스크립트에서 접근 불가(document.cookie)
				• HTTP 전송에만 사용
			• SameSite
				• XSRF 공격 방지
				• 요청 도메인과 쿠키에 설정된 도메인이 같은 경우만 쿠키 전송
	
	※ 캐시
		- 캐시가 없을 때
			• 데이터가 변경되지 않아도 계속 네트워크를 통해서 데이터를 다운로드 받아야 한다.
			• 인터넷 네트워크는 매우 느리고 비싸다.
			• 브라우저 로딩 속도가 느리다.
			• 느린 사용자 경험
		
		- 캐시가 있을 때
			• 캐시 덕분에 캐시 가능 시간동안 네트워크를 사용하지 않아도 된다.
			• 비싼 네트워크 사용량을 줄일 수 있다.
			• 브라우저 로딩 속도가 매우 빠르다.
			• 빠른 사용자 경험
		
		- 캐시 유효 시간 만료
			• 캐시 유효 시간이 만료되면, 서버를 통해 데이터를 다시 조회하고, 캐시를 갱신한다.
			• 이때 다시 네트워크 다운로드가 발생한다.
			• 유효 시간이 만료되었을때 서버에서 기존 데이터를 변경할 수도 변경하지 않을 수도 있다. 
			  클라이언트의 데이터와 서버의 데이터가 같다는 사실을 확인할 수 있는 방법이 필요하다.
		
		※ 검증 헤더
			- 캐시 데이터와 서버 데이터가 같은지 검증하는 데이터
			- If-Modified-Since: Last-Modified 사용
			- If-None-Match: ETag 사용
			- 클라이언트는 서버가 보낸 응답 헤더 정보로 캐시의 메타 정보를 갱신
			- 결과적으로 네트워크 다운로드가 발생하지만 용량이 적은 헤더 정보만 다운로드
			
			1. Last-Modified(데이터 최종 수정일)
				- 캐시 유효 시간이 만료되도, 서버의 데이터가 갱신되지 않으면 304 Not Modified + 헤더 메타 정보만 응답(바디X)
				- 데이터 미변경 예시
					• 캐시: 2020년 11월 10일 10:00:00 vs 서버: 2020년 11월 10일 10:00:00
					• 304 Not Modified, 헤더 데이터만 전송(BODY 미포함)
				- 데이터 변경 예시
					• 캐시: 2020년 11월 10일 10:00:00 vs 서버: 2020년 11월 10일 11:00:00
					• 200 OK, 모든 데이터 전송(BODY 포함)
				- 단점
					• 1초 미만 단위로 캐시 조정이 불가능
					• 날짜 기반의 로직 사용
					• 데이터를 수정해서 날짜가 다르지만, 같은 데이터를 수정해서 데이터 결과가 똑같은 경우
					• 서버에서 별도의 캐시 로직을 관리하고 싶은 경우
						• 예) 스페이스나 주석처럼 크게 영향이 없는 변경에서 캐시를 유지하고 싶은 경우
						
			2. ETag(Entity Tag)
				- 캐시용 데이터에 임의의 고유한 버전 이름을 달아둠
				- 데이터가 변경되면 이 이름을 바꾸어서 변경함(Hash를 다시 생성)
					• 예) ETag: "aaaaa" -> ETag: "bbbbb"
				- 진짜 단순하게 ETag만 보내서 같으면 유지, 다르면 다시 받기!
				- 캐시 제어 로직을 서버에서 완전히 관리
		
		※ 캐시 제어 헤더
			- Cache-Control: 캐시 제어
				• Cache-Control: max-age
					• 캐시 유효 시간, 초 단위
				• Cache-Control: no-cache
					• 데이터는 캐시해도 되지만, 항상 원(origin) 서버에 검증하고 사용
				• Cache-Control: no-store
					• 데이터에 민감한 정보가 있으므로 저장하면 안됨(메모리에서 사용하고 최대한 빨리 삭제)
					
				• Cache-Control: public 
					• 응답이 public 캐시에 저장되어도 됨(프록시 캐시에 저장해도 되는 것들)
				• Cache-Control: private 
					• 응답이 해당 사용자만을 위한 것임, private 캐시에 저장해야 함(기본값)
				• Cache-Control: s-maxage 
					• 프록시 캐시에만 적용되는 max-age
				• Age: 60 (HTTP 헤더)
					• 오리진 서버에서 응답 후 프록시 캐시 내에 머문 시간(초)
				
			- Pragma: 캐시 제어(하위 호환)
				• Pragma: no-cache(no-cache 처럼 동작)
				• HTTP 1.0 하위 호환
				
			- Expires: 캐시 유효 기간(하위 호환)
				• 캐시 만료일을 정확한 날짜로 지정
				• HTTP 1.0 부터 사용
				• 지금은 더 유연한 Cache-Control: max-age 권장
				• Cache-Control: max-age와 함께 사용하면 Expires는 무시
		
		※ 캐시 무효화
			- 확실한 캐시 무효화를 하려면 다 넣어줘야 함
			
			Cache-Control: no-cache, no-store, must-revalidate 
			Pragma: no-cache
			
※ HTTP Body
	- 메시지 본문(message body)을 통해 표현 데이터(과거에는 Entitiy 본문) 전달
	- 메시지 본문 = 페이로드(payload)
	- 표현은 요청이나 응답에서 전달할 실제 데이터
	- 표현 헤더는 표현 데이터를 해석할 수 있는 정보 제공
		• 데이터 유형(html, json), 데이터 길이, 압축 정보 등등
