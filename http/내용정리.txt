※ 인터넷 네트워크
	1. IP(Internet Protocol)
		- 지정한 IP 주소(IP Address)에 데이터 전달
		- 패킷(Packet)이라는 통신 단위로 데이터 전달(패킷은 출발지IP, 도착지IP, 전송할 데이터 등등으로 구성)
		
		※ 한계
			- 비연결성
				• 패킷을 받을 대상이 없거나 서비스 불능 상태여도 패킷 전송
			- 비신뢰성
				• 중간에 패킷이 소실
				• 패킷 순서 보장X
			- 프로그램 구분
				• 같은 IP를 사용하는 서버에서 통신하는 애플리케이션이 둘 이상이면? => 어떤 애플리케이션으로 패킷을 보낼 것인지 구분할 수 없다.
		
	2. TCP, UDP
		1) TCP(전송 제어 프로토콜(Transmission Control Protocol))
			- IP 패킷에 TCP 세그먼트(포트번호, 전송제어, 순서, 검증정보 등등)을 집어넣음
			- 연결지향 - TCP 3 way handshake (가상 연결)
				• SYN : 접속요청, ACK : 요청수락
					① 클라이언트 SYN
					② 서버 SYN + ACK
					③ 클라이언트 ACK(데이터 함께 전송 가능)
			- 데이터 전달 보증
			- 순서 보장
				① 메세지 용량이 커서 잘라서 1, 2, 3번 순서대로 보냈는데, 서버에서 1, 3, 2번 순서로 도착을 해버렸다.
				② 잘못 전송된 패킷을 기준으로 다시 보내라고 요청을 해서 다시 패킷을 받는다.
			- 신뢰할 수 있는 프로토콜
			- 현재는 대부분 TCP 사용
			
		2) UDP(사용자 데이터그램 프로토콜(User Datagram Protocol))
			- 연결지향 X - TCP 3 way handshake X
			- 데이터 전달 보증 X
			- 순서 보장 X
			- 데이터 전달 및 순서가 보장되지 않지만, 단순하고 빠름(멀티미디어 스트리밍 애플리케이션, 온라인 게임, 인터넷 전화 애플리케이션과 같은 실시간으로 데이터가 오고 가는 서비스에서 많이 사용)
			- IP와 거의 같다고 보면되고, IP 정보에 PORT와 체크섬(메시지 검증해주는 데이터) 정도만 추가된 형태
			- IP에 기능이 거의 추가되지 않은 하얀 도화지 같은 상태이기 때문에 최적화 및 커스터마이징이 용이하다.

	3. PORT
		- 컴퓨터에서 카카오톡, 게임, 노래를 듣고 있는 상황이면 여러 개의 서버와 통신을 하고 있다.
		  패킷들이 자신의 IP로 날라올텐데 이게 어디에서 필요한 패킷인지 구분을 할 수가 없다. 반대로 보낼때도 마찬가지이다.
		  IP만 가지고는 해결을 할 수가 없기때문에 PORT가 존재한다.
		  IP는 아파트(목적지 서버)를 찾는 거고 포트는 몇동 몇호(그 서버 안에서 돌아가는 애플리케이션들을 구분)라고 생각하면 된다.
		  포트번호는 TCP 세그먼트에 들어있다.
		  
		- 0 ~ 65535 할당 가능
		- 0 ~ 1023: 잘 알려진 포트, 사용하지 않는 것이 좋음
			• FTP - 20, 21
			• TELNET - 23
			• HTTP - 80
			• HTTPS - 443
		
	4. DNS(Domain Name System)
		- IP는 기억하기 어렵고 변경 될 수 있다. 그렇기 때문에 중간에 전화번호부 같은 개념을 둬서, 도메인 명을 등록하면 IP 주소로 바꿀 수 있다.
		  
		  도메인명			IP
		  ---------------------------
		  google.com	200.200.200.2
		  aaa.com		210.210.210.3

=================================================================================================================================================================================

※ URI와 웹 브라우저 요청 흐름
	1. URI
		- URI(Uniform Resource Identifier) : URI는 로케이터(Locator), 이름(Name) 또는 둘 다 추가로 분류될 수 있다.
			- 사람들을 식별할 때 주민번호로 식별 할 수 있듯이 무슨 자원이 어디에 있는지 자원 자체를 식별
			- Uniform 	: 자원을 식별하는 통일된 방식
			- Resource	: 자원, URI로 식별할 수 있는 모든 것
			- Identifier: 다른 항목과 구분하는데 필요한 정보 
		- URL(Uniform Resource Locator)
			- 리소스의 위치
			- 위치는 변할 수 있다.
		- URN(Uniform Resource Name)
			- 리소스의 이름
			- 이름은 변하지 않는다.
			- 거의 사용하지 않음(URN 이름만으로 실제 리소스를 찾을 수 있는 방법이 보편화 되지 않음)
		※ URI는 URL과 URN을 포함한다.
		
		※ URL 문접
			- scheme://[userinfo@]host[:port][/path][?query][#fragment]
			- https://www.google.com:443/search?q=hello&hl=ko
			
			1) scheme
				- 주로 프로토콜(어떤 방식으로 자원에 접근할 것인가 하는 약속 규칙) 사용
				  예) http, https, ftp 등등
				  
			2) userinfo
				- URL에 사용자 정보를 포함해서 인증
				- 거의 사용하지 않음
				
			3) host
				- 도메인명 또는 IP 주소를 직접 사용 가능
				
			4) port
				- 일반적으로 생략, 생략 시 http는 80, https는 443
				
			5) path
				- 리소스 경로, 보통 계층적 구조
				  예) /home/file1.jpg, /members/100, /items/iphone15
				  
			6) query
				- key=value 형태
				- ?로 시작하고 &로 추가
				- query parameter, query string 등으로 불림
				
			7) fragment
				- html 내부 북마크 등에 사용
				- 서버에 전송하는 정보는 아님

	2. 웹 브라우저 요청 흐름
		https://google.com/search?q=hello&hl=ko 웹 브라우저에 요청을 하게 되면
			1) DNS 조회해서 IP 정보를 가져오고, 포트 정보 확인
			
			2) 웹 브라우저가 HTTP 요청 메세지를 생성
				
				(실제로는 추가정보가 더 존재한다.)
				GET /search?q=hello&hl=ko HTTP/1.1
				Host: www.google.com
			
			3) SOCKET 라이브러리를 통해 전달
				- TCP/IP 연결(3 way handshake)
				- 데이터 전달
				
			4) TCP/IP 패킷 생성, HTTP 메시지 포함
			
			5) 서버로 HTTP 메시지 전송
			
			6) 서버에서 HTTP 메시지를 조회 및 해석 
			
			7) 서버에서 HTTP 응답 메시지를 생성 후 클라이언트로 전송
			
				(실제로는 추가정보가 더 존재한다.)
				HTTP/1.1 200 OK
				Content-Type: text/html;charset=UTF-8
				Content-Length: 3423
				
				<html>
				 <body>...</body>
				</html>
			
			8) 클라이언트에서 받은 응답 메시지로 브라우저에 렌더링
		
=================================================================================================================================================================================

※ HTTP(HyperText Transfer Protocol)
	- HTML, TEXT
	- IMAGE, 음성, 영상, 파일
	- JSON, XML (API)
	- 거의 모든 형태의 데이터 전송 가능
	- 서버간에 데이터를 주고 받을 때도 대부분 HTTP 사용
	
	※ 기반 프로토콜
		- TCP: HTTP/1.1, HTTP/2
		- UDP: HTTP/3
	
	※ HTTP 특징
		1. 클라이언트 서버 구조
			• Request Response 구조
			• 클라이언트는 서버에 요청을 보내고, 응답을 대기
			• 서버가 요청에 대한 결과를 만들어서 응답
			
			★ 중요한건 클라이언트와 서버가 분리 되어야 한다는 것이다.
			클라이언트는 UI와 UX에 신경쓰고 서버는 비지니스 로직과 데이터에 집중을 하는 것이다.
			즉, 클라이언트와 서버를 독립적으로 구분한다는 것은 각자의 책임을 나눠 해당 책임에만 집중하여, 클라이언트와 서버 양쪽이 각각 독립적으로 고도화 될 수 있다는 것이다.
			
		2. 무상태 프로토콜(Stateless), 비연결성(Connectionless)
			- 상태유지(Stateful)
				- 서버가 클라이언트의 상태를 보존한다.
				- 예를 들면 쇼핑몰에서 물건을 고르고 결제를 해야 하는 상황
					• 물건을 고르고 다음 페이지로 이동
					• 색상을 고르고 다음 페이지로 이동
					• 사이즈를 고르고 다음 페이지로 이동
					• 결제 방식을 선택하고 결제
				하지만 중간에 서버가 장애나면 클라이언트는 처음부터 다시 작업을 요청해야한다.
				그래서 서버가 바뀔때마다 클라이언트의 내용을 기록해서 상태를 유지해야 되는데 쉽지 않다.
			
			- 무상태(Stateless)
				- 서버가 클라이언트의 상태를 보존하지 않는다.
				- 예를 들면 쇼핑몰에서 물건을 고르고 결제를 해야 하는 상황
					• 물건 선택, 색상 선택, 사이즈 선택, 결제 방식 선택하고 결제
				이러한 무상태 환경은 클라이언트가 상태 정보를 갖고 있는 것이기 때문에, 아무 서버나 호출해도 된다.(수평확장에 유리)
				하지만 상태유지(Stateful)보다 데이터를 많이 보내야 한다는 단점도 있다.
				
				• 서버가 클라이언트의 상태를 보존X
				• 장점: 서버 확장성 높음(스케일 아웃 = 수평확장)
				• 단점: 클라이언트가 추가 데이터 전송
							
			- 비연결성(Connectionless)
				- 서버와 클라이언트의 Connection 연결을 지속하지 않는다.
				- 클라이언트가 서버에 요청을 하고 응답을 받으면 바로 TCP/IP 연결을 끊어 연결을 유지하지 않음으로써 서버의 자원을 효율적으로 관리하고 수 많은 클라이언트의 요청에 대응할 수 있게 함
				
				※ 비연결성 한계와 극복
					• 웹 브라우저로 사이트를 요청하면 HTML 뿐만 아니라 자바스크립트, css, 이미지 등등 수 많은 자원이 필요하다.
					HTTP 초기에는 모든 자료에 대해서 비연결성으로 각각의 자원에 대해 연결/응답/종료를 반복했다.(새로 연결을 맺을 때 마다 3 way handshake 발생)
						
					• 지금은 HTTP 지속 연결(Persistent Connections)로 문제 해결
						• 웹 브라우저로 사이트를 요청하면 HTML 뿐만 아니라 자바스크립트, css, 추가 이미지 등등 수 많은 자원이 함께 다운로드되고 연결을 종료한다.
						• HTTP/2, HTTP/3에서 더 많은 최적화
					
		3. HTTP 메시지
			- HTTP 메시지 구조
				• 요청 메시지
				(start-line)
				GET /search?q=hello&hl=ko HTTP/1.1
				(header)
				Host: www.google.com
				(empty line)(CRLF)
				(message body)
				(...)
								
				• 응답 메시지
				(start-line)
				HTTP/1.1 200 OK
				(header)
				Content-Type: text/html;charset=UTF-8
				Content-Length: 3423
				(empty line)(CRLF)
				(message body)
				<html>
				    <body>...</body>
				</html>
				
				1) start-line 시작 라인
					• start-line = request-line 또는 status-line
						1-1) request-line(요청 메시지)
						• request-line = method + SP(공백) + request-target + SP(공백) + HTTP-version + CRLF(엔터)
							- method
								• GET, POST, DELETE, PUT 등등
							- request-target
								• absolute-path[?query] (절대경로[?쿼리])
								• 절대경로= "/" 로 시작하는 경로
								
						1-2) status-line(응답 메시지)
						• status-line = HTTP-version + SP(공백) + status-code + SP(공백) + reason-phrase + CRLF(엔터)
							- status-code(상태코드)
								• 200, 400, 500 등등
							- reason-phrase
								• 이유문구: 사람이 이해할 수 있는 짧은 상태 코드 설명 글
						
				2) header 헤더
					• header-field = field-name + ":" + OWS(띄어쓰기 허용) + field-value + OWS(띄어쓰기 허용)
						- HTTP 전송에 필요한 모든 부가정보
						- 필요시 임의의 헤더 추가 가능
								
				3) message body
					• 실제 전송할 데이터
					• HTML 문서, 이미지, 영상, JSON 등등 byte로 표현할 수 있는 모든 데이터 전송 가능
					
		4. 단순함, 확장 가능

=================================================================================================================================================================================

★ 회원 정보 관리 API를 만든다고 가정 ★
리소스는 회원이다. 회원이라는 개념 자체가 바로 리소스다. 그렇기 때문에 
• 회원 목록 조회 /read-member-list	=> /members
• 회원 조회 /read-member-by-id		=> /members/{id}
• 회원 등록 /create-member			=> /members/{id}
• 회원 수정 /update-member			=> /members/{id}
• 회원 삭제 /delete-member			=> /members/{id}
왼쪽이 아니라 오른쪽 처럼 URI를 설계해야한다.
리소스(명사)는 회원이고 행위(메소드)(동사)는 조회, 등록, 삭제, 변경이다.
이 행위를 구분하기 위해 HTTP 메소드가 있다.


※ HTTP 메소드
	★ 주요 메소드
		1. GET: 리소스 조회
		2. POST: 요청 데이터 처리, 주로 등록에 사용
		3. PUT: 리소스를 대체, 해당 리소스가 없으면 생성
		4. PATCH: 리소스 부분 변경
		5. DELETE: 리소스 삭제
	
	기타 메소드
		- HEAD: GET과 동일하지만 메시지 부분을 제외하고, 상태 줄과 헤더만 반환
		- OPTIONS: 대상 리소스에 대한 통신 가능 옵션(메서드)을 설명(주로 CORS에서 사용)
		- CONNECT: 대상 리소스로 식별되는 서버에 대한 터널을 설정
		- TRACE: 대상 리소스에 대한 경로를 따라 메시지 루프백 테스트를 수행
	
	1. GET
		- 리소스 조회
		- 서버에 전달하고 싶은 데이터는 query(쿼리 파라미터, 쿼리 스트링)를 통해서 전달
		- 메시지 바디를 사용해서 데이터를 전달할 수 있지만, 지원하지 않는 곳이 많아서 권장하지 않음
		
	2. POST
		- 요청 데이터 처리
		- 메시지 바디를 통해 서버로 요청 데이터 전달
		- 서버는 요청 데이터를 처리
			• 메시지 바디를 통해 들어온 데이터를 처리하는 모든 기능을 수행한다.
		- 주로 전달된 데이터로 신규 리소스 등록, 프로세스 처리에 사용
		
		※ 정리
			- 새 리소스 생성(등록) 
				• 서버가 아직 식별하지 않은 새 리소스 생성
			- 요청 데이터 처리
				• 단순히 데이터를 생성하거나, 변경하는 것을 넘어서 프로세스를 처리해야 하는 경우
				예) 주문에서 결제완료 -> 배달시작 -> 배달완료 처럼 단순히 값 변경을 넘어 프로세스의 상태가 변경되는 경우
				• POST의 결과로 새로운 리소스가 생성되지 않을 수도 있음
				예) POST /orders/{orderId}/start-delivery (컨트롤 URI)
			- 다른 메서드로 처리하기 애매한 경우
				• 애매하면 POST
				예) JSON으로 조회 데이터를 넘겨야 하는데, GET 메서드를 사용하기 어려운 경우