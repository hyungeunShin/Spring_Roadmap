※ 웹 서버(Web Server)
	- HTTP 기반으로 동작
	- 정적 리소스 제공, 기타 부가기능
	- 정적(파일) HTML, CSS, JS, 이미지, 영상
	- 예) NGINX, APACHE

=================================================================================================================================================================================

※ 웹 애플리케이션 서버(WAS - Web Application Server)
	- HTTP 기반으로 동작
	- 웹 서버 기능 포함+ (정적 리소스 제공 가능)
	- 프로그램 코드를 실행해서 애플리케이션 로직 수행
		• 동적 HTML, HTTP API(JSON)
		• 서블릿, JSP, 스프링 MVC
	- 예) 톰캣(Tomcat) Jetty, Undertow

=================================================================================================================================================================================

※ 웹 서버, 웹 애플리케이션 서버(WAS) 차이
	- 웹 서버는 정적 리소스(파일), WAS는 애플리케이션 로직
	- 사실은 둘의 용어도 경계도 모호함
		• 웹 서버도 프로그램을 실행하는 기능을 포함하기도 함
		• 웹 애플리케이션 서버도 웹 서버의 기능을 제공함
	- 자바는 서블릿 컨테이너 기능을 제공하면 WAS
		• 서블릿 없이 자바코드를 실행하는 서버 프레임워크도 있음
	- WAS는 애플리케이션 코드를 실행하는데 더 특화

=================================================================================================================================================================================

※ 서블릿
	@WebServlet(name = "helloServlet", urlPatterns = "/hello") 
	public class HelloServlet extends HttpServlet { 
 		@Override 
 		protected void service(HttpServletRequest request, HttpServletResponse response){ 
 			//애플리케이션 로직
 		} 
	}
	
	- urlPatterns(/hello)의 URL이 호출되면 서블릿 코드가 실행
	- HTTP 요청 정보를 편리하게 사용할 수 있는 HttpServletRequest 지원
		• 서버 TCP/IP 대기, 소켓 연결
		• HTTP 요청 메시지를 파싱해서 읽기
		• POST 방식, /save URL 인지
		• Content-Type 확인
		• HTTP 메시지 바디 내용 피싱
		• 저장 프로세스 실행
	- HTTP 응답 정보를 편리하게 제공할 수 있는 HttpServletResponse 지원
		• HTTP 응답 메시지 생성 시작
		• HTTP 시작 라인 생성
		• Header 생성
		• 메시지 바디에 HTML 생성에서 입력
		• TCP/IP에 응답 전달, 소켓 종료
	- 개발자는 HTTP 스펙을 매우 편리하게 사용하며 비지니스 로직에 집중
	
※ 서블릿 컨테이너
	- 톰캣처럼 서블릿을 지원하는 WAS를 서블릿 컨테이너라고 함
	- 서블릿 컨테이너는 서블릿 객체를 생성, 초기화, 호출, 종료하는 생명주기 관리
	- 서블릿 객체는 싱글톤으로 관리
		• 고객의 요청이 올 때 마다 계속 객체를 생성하는 것은 비효율
		• 최초 로딩 시점에 서블릿 객체를 미리 만들어두고 재활용
		• 모든 고객 요청은 동일한 서블릿 객체 인스턴스에 접근
		• 공유 변수 사용 주의
		• 서블릿 컨테이너 종료시 함께 종료
	- JSP도 서블릿으로 변환 되어서 사용
	- 동시 요청을 위한 멀티 쓰레드 처리 지원

=================================================================================================================================================================================

※ 쓰레드
	- 애플리케이션 코드를 하나하나 순차적으로 실행하는 것은 쓰레드
	- 자바 메인 메서드를 처음 실행하면 main 이라는 이름의 쓰레드가 실행
	- 쓰레드가 없다면 자바 애플리케이션 실행이 불가능(서블릿도 쓰레드가 호출)
	- 쓰레드는 한번에 하나의 코드 라인만 수행
	- 동시 처리가 필요하면 쓰레드를 추가로 생성

※ 요청 마다 쓰레드 생성했을 때 장단점
	- 장점
		• 동시 요청을 처리 가능
		• 리소스(CPU, 메모리)가 허용할 때 까지 처리가능
		• 하나의 쓰레드가 지연 되어도, 나머지 쓰레드는 정상 동작
	- 단점
		• 쓰레드는 생성 비용은 매우 비쌈
			• 고객의 요청이 올 때 마다 쓰레드를 생성하면, 응답 속도가 늦어진다.
		• 쓰레드는 컨텍스트 스위칭 비용이 발생
		• 쓰레드 생성에 제한이 없다.
			• 고객 요청이 너무 많이 오면 CPU, 메모리 임계점을 넘어서 서버가 죽을 수 있다.

※ 쓰레드 풀
	- 특징
		• 요청 마다 쓰레드 생성의 단점 보완
		• 필요한 쓰레드를 쓰레드 풀에 보관하고 관리
		• 쓰레드 풀에 생성 가능한 쓰레드의 최대치를 관리, 톰캣은 최대 200개 기본 설정 (변경 가능)
	- 사용
		• 쓰레드가 필요하면, 이미 생성되어 있는 쓰레드를 쓰레드 풀에서 꺼내서 사용
		• 사용을 종료하면 쓰레드 풀에 해당 쓰레드를 반납
		• 최대 쓰레드가 모두 사용중이어서 쓰레드 풀에 쓰레드가 없으면?
			• 기다리는 요청은 거절하거나 특정 숫자만큼만 대기하도록 설정 가능
	- 장점
		• 쓰레드가 미리 생성되어 있으므로, 쓰레드를 생성하고 종료하는 비용(CPU)이 절약되고, 응답 시간이 빠름
		• 생성 가능한 쓰레드의 최대치가 있으므로 너무 많은 요청이 들어와도 기존 요청은 안전하게 처리 가능
	
	※ 실무 팁
		- WAS의 주요 튜닝 포인트는 최대 쓰레드(max thread) 수이다.
		- 이 값을 너무 낮게 설정하면?
			• 동시 요청이 많으면, 서버 리소스는 여유롭지만, 클라이언트는 응답 지연
		- 이 값을 너무 높게 설정하면?
			• 동시 요청이 많으면, CPU, 메모리 리소스 임계점 초과로 서버 다운
			
※ WAS의 멀티 쓰레드 지원
	- 멀티 쓰레드에 대한 부분은 WAS가 처리
	- 개발자가 멀티 쓰레드 관련 코드를 신경쓰지 않아도 됨
	- 개발자는 마치 싱글 쓰레드 프로그래밍을 하듯이 편리하게 소스 코드를 개발
	- 멀티 쓰레드 환경이므로 싱글톤 객체(서블릿, 스프링 빈)는 주의해서 사용
