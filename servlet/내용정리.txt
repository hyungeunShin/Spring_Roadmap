※ 웹 서버(Web Server)
	- HTTP 기반으로 동작
	- 정적 리소스 제공, 기타 부가기능
	- 정적(파일) HTML, CSS, JS, 이미지, 영상
	- 예) NGINX, APACHE

=================================================================================================================================================================================

※ 웹 애플리케이션 서버(WAS - Web Application Server)
	- HTTP 기반으로 동작
	- 웹 서버 기능 포함+ (정적 리소스 제공 가능)
	- 프로그램 코드를 실행해서 애플리케이션 로직 수행
		• 동적 HTML, HTTP API(JSON)
		• 서블릿, JSP, 스프링 MVC
	- 예) 톰캣(Tomcat) Jetty, Undertow

=================================================================================================================================================================================

※ 웹 서버, 웹 애플리케이션 서버(WAS) 차이
	- 웹 서버는 정적 리소스(파일), WAS는 애플리케이션 로직
	- 사실은 둘의 용어도 경계도 모호함
		• 웹 서버도 프로그램을 실행하는 기능을 포함하기도 함
		• 웹 애플리케이션 서버도 웹 서버의 기능을 제공함
	- 자바는 서블릿 컨테이너 기능을 제공하면 WAS
		• 서블릿 없이 자바코드를 실행하는 서버 프레임워크도 있음
	- WAS는 애플리케이션 코드를 실행하는데 더 특화

=================================================================================================================================================================================

※ 서블릿
	@WebServlet(name = "helloServlet", urlPatterns = "/hello") 
	public class HelloServlet extends HttpServlet { 
 		@Override 
 		protected void service(HttpServletRequest request, HttpServletResponse response){ 
 			//애플리케이션 로직
 		} 
	}
	
	- urlPatterns(/hello)의 URL이 호출되면 서블릿 코드가 실행
	- HTTP 요청 정보를 편리하게 사용할 수 있는 HttpServletRequest 지원
		• 서버 TCP/IP 대기, 소켓 연결
		• HTTP 요청 메시지를 파싱해서 읽기
		• POST 방식, /save URL 인지
		• Content-Type 확인
		• HTTP 메시지 바디 내용 피싱
		• 저장 프로세스 실행
	- HTTP 응답 정보를 편리하게 제공할 수 있는 HttpServletResponse 지원
		• HTTP 응답 메시지 생성 시작
		• HTTP 시작 라인 생성
		• Header 생성
		• 메시지 바디에 HTML 생성에서 입력
		• TCP/IP에 응답 전달, 소켓 종료
	- 개발자는 HTTP 스펙을 매우 편리하게 사용하며 비지니스 로직에 집중
	
※ 서블릿 컨테이너
	- 톰캣처럼 서블릿을 지원하는 WAS를 서블릿 컨테이너라고 함
	- 서블릿 컨테이너는 서블릿 객체를 생성, 초기화, 호출, 종료하는 생명주기 관리
	- 서블릿 객체는 싱글톤으로 관리
		• 고객의 요청이 올 때 마다 계속 객체를 생성하는 것은 비효율
		• 최초 로딩 시점에 서블릿 객체를 미리 만들어두고 재활용
		• 모든 고객 요청은 동일한 서블릿 객체 인스턴스에 접근
		• 공유 변수 사용 주의
		• 서블릿 컨테이너 종료시 함께 종료
	- JSP도 서블릿으로 변환 되어서 사용
	- 동시 요청을 위한 멀티 쓰레드 처리 지원

=================================================================================================================================================================================

※ 쓰레드
	- 애플리케이션 코드를 하나하나 순차적으로 실행하는 것은 쓰레드
	- 자바 메인 메서드를 처음 실행하면 main 이라는 이름의 쓰레드가 실행
	- 쓰레드가 없다면 자바 애플리케이션 실행이 불가능(서블릿도 쓰레드가 호출)
	- 쓰레드는 한번에 하나의 코드 라인만 수행
	- 동시 처리가 필요하면 쓰레드를 추가로 생성

※ 요청 마다 쓰레드 생성했을 때 장단점
	- 장점
		• 동시 요청을 처리 가능
		• 리소스(CPU, 메모리)가 허용할 때 까지 처리가능
		• 하나의 쓰레드가 지연 되어도, 나머지 쓰레드는 정상 동작
	- 단점
		• 쓰레드는 생성 비용은 매우 비쌈
			• 고객의 요청이 올 때 마다 쓰레드를 생성하면, 응답 속도가 늦어진다.
		• 쓰레드는 컨텍스트 스위칭 비용이 발생
		• 쓰레드 생성에 제한이 없다.
			• 고객 요청이 너무 많이 오면 CPU, 메모리 임계점을 넘어서 서버가 죽을 수 있다.

※ 쓰레드 풀
	- 특징
		• 요청 마다 쓰레드 생성의 단점 보완
		• 필요한 쓰레드를 쓰레드 풀에 보관하고 관리
		• 쓰레드 풀에 생성 가능한 쓰레드의 최대치를 관리, 톰캣은 최대 200개 기본 설정 (변경 가능)
	- 사용
		• 쓰레드가 필요하면, 이미 생성되어 있는 쓰레드를 쓰레드 풀에서 꺼내서 사용
		• 사용을 종료하면 쓰레드 풀에 해당 쓰레드를 반납
		• 최대 쓰레드가 모두 사용중이어서 쓰레드 풀에 쓰레드가 없으면?
			• 기다리는 요청은 거절하거나 특정 숫자만큼만 대기하도록 설정 가능
	- 장점
		• 쓰레드가 미리 생성되어 있으므로, 쓰레드를 생성하고 종료하는 비용(CPU)이 절약되고, 응답 시간이 빠름
		• 생성 가능한 쓰레드의 최대치가 있으므로 너무 많은 요청이 들어와도 기존 요청은 안전하게 처리 가능
	
	※ 실무 팁
		- WAS의 주요 튜닝 포인트는 최대 쓰레드(max thread) 수이다.
		- 이 값을 너무 낮게 설정하면?
			• 동시 요청이 많으면, 서버 리소스는 여유롭지만, 클라이언트는 응답 지연
		- 이 값을 너무 높게 설정하면?
			• 동시 요청이 많으면, CPU, 메모리 리소스 임계점 초과로 서버 다운
			
※ WAS의 멀티 쓰레드 지원
	- 멀티 쓰레드에 대한 부분은 WAS가 처리
	- 개발자가 멀티 쓰레드 관련 코드를 신경쓰지 않아도 됨
	- 개발자는 마치 싱글 쓰레드 프로그래밍을 하듯이 편리하게 소스 코드를 개발
	- 멀티 쓰레드 환경이므로 싱글톤 객체(서블릿, 스프링 빈)는 주의해서 사용

=================================================================================================================================================================================

※ hello.servlet.web.servlet
	서블릿과 자바 코드만으로 HTML을 만들었다. 서블릿 덕분에 동적으로 원하는 HTML을 마음껏 만들 수 있다.
	정적인 HTML 문서라면 화면이 계속 달라지는 회원의 저장 결과라던가, 회원 목록 같은 동적인 HTML을 만드는 일은 불가능 할 것이다.
	그런데, 코드에서 보듯이 이것은 매우 복잡하고 비효율적이다. 자바 코드로 HTML을 만들어 내는 것보다 차라리 HTML 문서에 동적으로 변경해야 하는 부분만 자바 코드를 넣을 수 있다면 더 편리할 것이다.
	이것이 바로 템플릿 엔진이 나온 이유이다. 템플릿 엔진을 사용하면 HTML 문서에서 필요한 곳만 코드를 적용해서 동적으로 변경할 수 있다.
	
※ src/main/webapp/jsp
	서블릿으로 개발할 때는 뷰(View)화면을 위한 HTML을 만드는 작업이 자바 코드에 섞여서 지저분하고 복잡했다.
	JSP를 사용한 덕분에 뷰를 생성하는 HTML 작업을 깔끔하게 가져가고, 중간중간 동적으로 변경이 필요한 부분에만 자바 코드를 적용했다.
	그런데 이렇게 해도 해결되지 않는 몇가지 고민이 남는다.
	회원 저장 JSP를 보게되면 코드의 상위 절반은 회원을 저장하기 위한 비즈니스 로직이고, 나머지 하위 절반만 결과를 HTML로 보여주기 위한 뷰 영역이다. 회원 목록의 경우에도 마찬가지다.
	JSP가 너무 많은 역할을 한다.
	그래서 MVC 패턴의 등장한다. 비즈니스 로직은 서블릿 처럼 다른곳에서 처리하고, JSP는 목적에 맞게 HTML로 화면(View)을 그리는 일에 집중할 수 있도록 해야한다.

※ hello.servlet.web.servletmvc
	MVC 패턴을 적용한 덕분에 컨트롤러의 역할과 뷰를 렌더링 하는 역할을 명확하게 구분할 수 있다.
	특히 뷰는 화면을 그리는 역할에 충실한 덕분에, 코드가 깔끔하고 직관적이다. 단순하게 모델에서 필요한 데이터를 꺼내고, 화면을 만들면 된다.
	그런데 컨트롤러는 딱 봐도 중복이 많고, 필요하지 않는 코드들도 많다.
		- forward 중복 : View로 이동하는 코드가 항상 중복 호출되어야 한다. 물론 이 부분을 메서드로 공통화해도 되지만, 해당 메서드도 항상 직접 호출해야 한다.
		- ViewPath 중복 : /WEB-INF/views/OOO.jsp
		- 사용하지 않는 코드 : HttpServletRequest request, HttpServletResponse response 코드를 사용할 때도 있고, 사용하지 않을 때도 있다.
		- 공통 처리가 어렵다. 기능이 복잡해질수록 컨트롤러에서 공통으로 처리해야 하는 부분이 점점 더 많이 증가할 것이다.
		  단순히 공통 기능을 	메서드로 뽑으면 될 것 같지만, 결과적으로 해당 메서드를 항상 호출해야 하고, 실수로 호출하지 않으면 문제가 될 것이다.
	
	★ 이 문제를 해결하려면 컨트롤러 호출 전에 먼저 공통 기능을 처리해야 한다. 소위 수문장 역할을 하는 기능이 필요하다.
	프론트 컨트롤러(Front Controller) 패턴을 도입하면 이런 문제를 깔끔하게 해결할 수 있다.(입구를 하나로!)
	스프링 MVC의 핵심도 바로 이 프론트 컨트롤러에 있다.
		FrontController 패턴 특징
			- 프론트 컨트롤러 서블릿 하나로 클라이언트의 요청을 받음
			- 프론트 컨트롤러가 요청에 맞는 컨트롤러를 찾아서 호출
			- 공통 처리 가능
			- 프론트 컨트롤러를 제외한 나머지 컨트롤러는 서블릿을 사용하지 않아도 됨
		
		스프링 웹 MVC의 핵심도 바로 FrontController
		스프링 웹 MVC의 DispatcherServlet이 FrontController 패턴으로 구현되어 있음
	
※ hello.servlet.web.frontcontroller.v1
	FrontController 패턴 적용 시작

※ hello.servlet.web.frontcontroller.v2
	hello.servlet.web.frontcontroller.v1 컨트롤러에서 나타나는 공통코드 : request.getRequestDispatcher("/WEB-INF/views/new-form.jsp").forward(request, response); 
	이 부분을 깔끔하게 분리하기 위해 별도로 뷰를 처리하는 객체를 생성한다.(MyView.class)

★★★ hello.servlet.web.frontcontroller.v3 ★★★
	- 서블릿 종속성 제거(ModelView.class)
		컨트롤러 입장에서 HttpServletRequest, HttpServletResponse이 꼭 필요한가?
		요청 파라미터 정보는 자바의 Map으로 대신 넘기도록 하면 지금 구조에서는 컨트롤러가 서블릿 기술을 몰라도 동작할 수 있다.
		그리고 request 객체를 Model로 사용하는 대신에 별도의 Model 객체를 만들어서 반환하면 된다.
		이렇게 하면 구현 코드도 매우 단순해지고, 테스트 코드 작성이 쉽다.
		
	- 뷰 이름 중복 제거(FrontControllerServletV3.class의 viewResolver 메소드)
		컨트롤러에서 지정하는 뷰 이름에 중복이 있는 것을 확인할 수 있다.
		컨트롤러는 뷰의 논리 이름을 반환하고, 실제 물리 위치의 이름은 프론트 컨트롤러에서 처리하도록 단순화해야 한다.
		이렇게 해두면 향후 뷰의 폴더 위치가 함께 이동해도 프론트 컨트롤러만 고치면 된다.

※ hello.servlet.web.frontcontroller.v4
	앞서 만든 v3 컨트롤러는 서블릿 종속성을 제거하고 뷰 경로의 중복을 제거하며 잘 설계된 컨트롤러이다.
	그런데 실제 컨트톨러 인터페이스를 구현하는 개발자 입장에서 보면, 항상 ModelView 객체를 생성하고 반환해야 하는 부분이 조금은 번거롭다.
	기존 구조에서 모델을 파라미터로 넘기고, 뷰의 논리 이름을 반환하게 수정한다.

※ hello.servlet.web.frontcontroller.v5
	만약 어떤 개발자는 ControllerV3 방식으로 개발하고 싶고, 어떤 개발자는 ControllerV4 방식으로 개발하고 싶다면 어떻게 해야할까?
	지금까지 개발한 프론트 컨트롤러는 한가지 방식의 컨트롤러 인터페이스만 사용할 수 있다.
	이 문제를 해결하기 위해 어댑터 패턴이 등장한다.
		- 핸들러 어댑터: 중간에 어댑터 역할을 하는 어댑터가 추가되었는데 이름이 핸들러 어댑터이다. 여기서 어댑터 역할을 해주는 덕분에 다양한 종류의 컨트롤러를 호출할 수 있다.
		- 핸들러: 컨트롤러의 이름을 더 넓은 범위인 핸들러로 변경했다. 그 이유는 이제 어댑터가 있기 때문에 꼭 컨트롤러의 개념 뿐만 아니라 어떠한 것이든 해당하는 종류의 어댑터만 있으면 다 처리할 수 있기 때문이다.
	
=================================================================================================================================================================================

※ 스프링 MVC 핵심 구조
	- 직접 만든 프레임워크 스프링 MVC 비교
		FrontController		=> DispatcherServlet(org.springframework.web.servlet.DispatcherServlet)
		handlerMappingMap	=> HandlerMapping(org.springframework.web.servlet.HandlerMapping)
		MyHandlerAdapter	=> HandlerAdapter(org.springframework.web.servlet.HandlerAdapter)
		ModelView			=> ModelAndView(org.springframework.web.servlet.ModelAndView)
		viewResolver		=> ViewResolver(org.springframework.web.servlet.ViewResolver)
		MyView				=> View(org.springframework.web.servlet.View)

	1. DispatcherServlet
		• MVC의 프론트 컨트롤러가 바로 DispatcherServlet이다. 그리고 이 디스패처 서블릿이 바로 스프링 MVC의 핵심이다.
		
		• DispatcherServlet 서블릿 등록
			- DispatcherServlet도 부모 클래스에서 HttpServlet을 상속 받아서 사용하고, 서블릿으로 동작한다.
				DispatcherServlet => FrameworkServlet => HttpServletBean => HttpServlet
			- 스프링 부트는 DispatcherServlet을 서블릿으로 자동으로 등록하면서 모든 경로(urlPatterns="/")에 대해서 매핑한다.
				더 자세한 경로가 우선순위가 높다. 그래서 기존에 등록한 서블릿도 함께 동작한다.
		
		• 요청 흐름
			- 서블릿이 호출되면 HttpServlet이 제공하는 serivce()가 호출된다.
			- 스프링 MVC는 DispatcherServlet의 부모인 FrameworkServlet에서 service()를 오버라이드 해두었다.
			- FrameworkServlet.service()를 시작으로 여러 메서드가 호출되면서 DispatcherServlet.doDispatch()가 호출된다.

	2. HandlerMapping과 HandlerAdapter
		• 컨트롤러가 호출되려면 2가지가 필요하다.
			1. HandlerMapping(핸들러 매핑)
				- 핸들러 매핑에서 이 컨트롤러를 찾을 수 있어야 한다.
				- 찾는 순서
					0 = RequestMappingHandlerMapping 	: 애노테이션 기반의 컨트롤러인 @RequestMapping에서 사용
					1 = BeanNameUrlHandlerMapping 		: 스프링 빈의 이름으로 핸들러를 찾는다.
					...
					
			2. HandlerAdapter(핸들러 어댑터)
				- 핸들러 매핑을 통해서 찾은 핸들러를 실행할 수 있는 핸들러 어댑터가 필요하다.
				- 찾는 순서
					0 = RequestMappingHandlerAdapter 	: 애노테이션 기반의 컨트롤러인 @RequestMapping에서 사용
					1 = HttpRequestHandlerAdapter 		: HttpRequestHandler 처리
					2 = SimpleControllerHandlerAdapter 	: Controller 인터페이스(애노테이션X, 과거에 사용) 처리
					...
	
		※ 예시
			- hello.servlet.web.springmvc.old에 OldController.class
				1. 핸들러 매핑으로 핸들러 조회
					1) HandlerMapping을 순서대로 실행해서 핸들러를 찾는다.
					2) BeanNameUrlHandlerMapping을 통해 실행에 성공하고 핸들러인 OldController를 반환한다.
				2. 핸들러 어댑터 조회
					1) HandlerAdapter의 supports()를 순서대로 호출한다.
					2) SimpleControllerHandlerAdapter가 Controller 인터페이스를 지원하므로 대상이 된다.
				3. 핸들러 어댑터 실행
					1) 디스패처 서블릿이 조회한 SimpleControllerHandlerAdapter를 실행하면서 핸들러 정보도 함께 넘겨준다
					2) SimpleControllerHandlerAdapter는 핸들러인 OldController를 내부에서 실행하고 그 결과를 반환한다
		
			- hello.servlet.web.springmvc.old에 MyHttpRequestHandler.class
				1. 핸들러 매핑으로 핸들러 조회
					1) HandlerMapping을 순서대로 실행해서, 핸들러를 찾는다.
					2) BeanNameUrlHandlerMapping을 통해 실행에 성공하고 핸들러인 MyHttpRequestHandler를 반환한다.
				2. 핸들러 어댑터 조회
					1) HandlerAdapter의 supports()를 순서대로 호출한다.
					2) HttpRequestHandlerAdapter가 HttpRequestHandler 인터페이스를 지원하므로 대상이 된다.
				3. 핸들러 어댑터 실행
					1) 디스패처 서블릿이 조회한 HttpRequestHandlerAdapter를 실행하면서 핸들러 정보도 함께 넘겨준다.
					2) HttpRequestHandlerAdapter는 핸들러인 MyHttpRequestHandler를 내부에서 실행하고 그 결과를 반환한다.
			
	3. ViewResolver
		- 찾는 순서
			1 = BeanNameViewResolver : 빈 이름으로 뷰를 찾아서 반환한다.
			2 = InternalResourceViewResolver : JSP를 처리할 수 있는 뷰를 반환한다.
				spring.mvc.view.prefix=/WEB-INF/views/
				spring.mvc.view.suffix=.jsp
		
		※ 예시
			- hello.servlet.web.springmvc.old에 OldController.class
				1. 핸들러 어댑터 호출
					핸들러 어댑터를 통해 new-form이라는 논리 뷰 이름을 획득한다.
				2. ViewResolver 호출
					new-form이라는 뷰 이름으로 viewResolver를 순서대로 호출한다.
					BeanNameViewResolver는 new-form 이라는 이름의 스프링 빈으로 등록된 뷰를 찾아야 하는데 없다.
					InternalResourceViewResolver가 호출된다.
				3. InternalResourceViewResolver
					이 뷰 리졸버는 InternalResourceView를 반환한다.
				4. 뷰 - InternalResourceView
					InternalResourceView는 JSP처럼 포워드 forward()를 호출해서 처리할 수 있는 경우에 사용한다.
				5. view.render()
					view.render()가 호출되고 InternalResourceView는 forward()를 사용해서 JSP를 실행한다.

		※ 참고
			Thymeleaf 뷰 템플릿을 사용하면 ThymeleafViewResolver를 등록해야 한다. 최근에는 라이브러리만 추가하면 스프링 부트가 이런 작업도 모두 자동화해준다.
