※ 로그 선언
	- private Logger log = LoggerFactory.getLogger(getClass());
	- private static final Logger log = LoggerFactory.getLogger(Xxx.class)
	- @Slf4j : 롬복 사용 가능

	- LEVEL: TRACE > DEBUG > INFO > WARN > ERROR

	※ application.properties
		- 전체 로그 레벨 설정(기본 info)
		logging.level.root=info
			
		- hello.springmvc 패키지와 그 하위 로그 레벨 설정
		logging.level.hello.springmvc=debug

=================================================================================================================================================================================

※ @Controller 의 사용 가능한 파라미터 목록은 다음 공식 메뉴얼에서 확인할 수 있다.
	https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-arguments
	
※ @Controller 의 사용 가능한 응답 값 목록은 다음 공식 메뉴얼에서 확인할 수 있다.
	https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-return-types
	
=================================================================================================================================================================================

※ HttpEntity(hello.springmvc.basic.request의 RequestBodyStringController.class)
	- HTTP header, body 정보를 편리하게 조회
	- 메시지 바디 정보를 직접 조회
	- 요청 파라미터를 조회(Get 방식의 쿼리스트링 또는 application/x-www-urlencoded)하는 기능과 관계 없음(@RequestParam X, @ModelAttribute X)
	- HttpEntity는 응답에도 사용 가능
		• 메시지 바디 정보 직접 반환
		• 헤더 정보 포함 가능
		• view 조회X(@ResponseBody와 같은 기능)
	- HttpEntity를 상속받은 다음 객체들도 같은 기능을 제공		
		• RequestEntity
		• ResponseEntity
		
※ 요청 파라미터 vs HTTP 메시지 바디
	- 요청 파라미터를 조회하는 기능			: @RequestParam, @ModelAttribute
	- HTTP 메시지 바디를 직접 조회하는 기능	: @RequestBody
	- @RequestBody는 생략 불가능
		• @RequestBody를 생략하면 @ModelAttribute가 적용되어버린다.
	
=================================================================================================================================================================================

※ 스프링 MVC는 다음의 경우에 HTTP 메시지 컨버터를 적용한다.
	- HTTP 요청: @RequestBody, HttpEntity(RequestEntity) 
	- HTTP 응답: @ResponseBody, HttpEntity(ResponseEntity) 

※ 스프링 부트 기본 메시지 컨버터
	0 = ByteArrayHttpMessageConverter
	1 = StringHttpMessageConverter 
	2 = MappingJackson2HttpMessageConverter
	...
	
	- 스프링 부트는 다양한 메시지 컨버터를 제공하는데, 대상 클래스 타입과 미디어 타입 둘을 체크해서 사용여부를 결정한다. 만약 만족하지 않으면 다음 메시지 컨버터로 우선순위가 넘어간다.
	- ByteArrayHttpMessageConverter : byte[] 데이터를 처리한다.
		• 클래스 타입: byte[], 미디어타입: */*
		• 요청 예) @RequestBody byte[] data
		• 응답 예) @ResponseBody return byte[], 쓰기 미디어타입 application/octet-stream
	- StringHttpMessageConverter : String 문자로 데이터를 처리한다.
		• 클래스 타입: String, 미디어타입: */*
		• 요청 예) @RequestBody String data
		• 응답 예) @ResponseBody return "ok", 쓰기 미디어타입 text/plain
	- MappingJackson2HttpMessageConverter : application/json
		• 클래스 타입: 객체 또는 HashMap, 미디어타입 application/json 관련
		• 요청 예) @RequestBody HelloData data
		• 응답 예) @ResponseBody return helloData 쓰기 미디어타입 application/json 관련

※ org.springframework.http.converter.HttpMessageConverter 인터페이스
	- canRead(), canWrite() : 메시지 컨버터가 해당 클래스, 미디어타입을 지원하는지 체크
	- read(), write() 		: 메시지 컨버터를 통해서 메시지를 읽고 쓰는 기능

※ HTTP 요청 데이터 읽기
	- HTTP 요청이 오고, 컨트롤러에서 @RequestBody, HttpEntity 파라미터를 사용했는지 확인한다. 사용했다면...
	- 메시지 컨버터가 메시지를 읽을 수 있는지 확인하기 위해 canRead()를 호출
		• 대상 클래스 타입을 지원하는가
			예) @RequestBody의 대상 클래스 (byte[], String, 객체)
		• HTTP 요청의 Content-Type 미디어 타입을 지원하는가
			예) text/plain, application/json, */*
	- canRead() 조건을 만족하면 read()를 호출해서 객체를 생성하고 반환
	
※ HTTP 응답 데이터 생성
	- 컨트롤러에서 @ResponseBody, HttpEntity로 값을 반환하는지 확인한다. 사용했다면...
	- 메시지 컨버터가 메시지를 쓸 수 있는지 확인하기 위해 canWrite()를 호출
		• 대상 클래스 타입을 지원하는가
			예) return의 대상 클래스 (byte[], String, 객체)
		• HTTP 요청의 Accept 미디어 타입을 지원하는가(더 정확히는 @RequestMapping의 produces)
			예) text/plain, application/json, */*
	- canWrite() 조건을 만족하면 write()를 호출해서 HTTP 응답 메시지 바디에 데이터를 생성

=================================================================================================================================================================================

※ ArgumentResolver
	생각해보면, 애노테이션 기반의 컨트롤러는 매우 다양한 파라미터를 사용할 수 있었다.
	HttpServletRequest, Model, @RequestParam, @ModelAttribute 같은 애노테이션 그리고 @RequestBody, HttpEntity 같은 HTTP 메시지를 처리하는 부분까지 매우 큰 유연함을 보여주었다.
	이렇게 파라미터를 유연하게 처리할 수 있는 이유가 바로 ArgumentResolver 덕분이다.
	애노테이션 기반 컨트롤러를 처리하는 RequestMappingHandlerAdapter는 바로 이 ArgumentResolver를 호출해서 컨트롤러(핸들러)가 필요로 하는 다양한 파라미터의 값(객체)을 생성한다.
	그리고 이렇게 파리미터의 값이 모두 준비되면 컨트롤러를 호출하면서 값을 넘겨준다.
	스프링은 30개가 넘는 ArgumentResolver를 기본으로 제공한다.
	정확히는 HandlerMethodArgumentResolver인데 줄여서 ArgumentResolver라고 부른다.

	※ 동작 방식
	ArgumentResolver의 supportsParameter()를 호출해서 해당 파라미터를 지원하는지 체크하고, 지원하면 resolveArgument()를 호출해서 실제 객체를 생성한다.
	그리고 이렇게 생성된 객체가 컨트롤러 호출시 넘어가는 것이다.

※ ReturnValueHandler
	HandlerMethodReturnValueHandler를 줄여서 ReturnValueHandler라 부른다.
	ArgumentResolver와 비슷한데, 이것은 응답 값을 변환하고 처리한다.
	컨트롤러에서 String으로 뷰 이름을 반환해도 동작하는 이유가 바로 ReturnValueHandler 덕분이다.

	※ @ResponseBody를 사용
		- HTTP의 BODY에 문자 내용을 직접 반환
		- viewResolver 대신에 HttpMessageConverter가 동작
		- 기본 문자처리: StringHttpMessageConverter
		- 기본 객체처리: MappingJackson2HttpMessageConverter
		- byte 처리 등등 기타 여러 HttpMessageConverter가 기본으로 등록되어 있음